<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Connectors.AI.OpenAI</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.AddHeaderRequestPolicy">
            <summary>
            Helper class to inject headers into Azure SDK HTTP pipeline
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.AzureOpenAIClientBase.Client">
            <summary>
            OpenAI / Azure OpenAI Client
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.AzureOpenAIClientBase.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new AzureTextCompletion client instance using API Key auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.AzureOpenAIClientBase.#ctor(System.String,System.String,Azure.Core.TokenCredential,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new AzureTextCompletion client instance supporting AAD auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credential">Token credential, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="log">Application logger</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.ModelId">
            <summary>
            Model Id or Deployment Name
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.Client">
            <summary>
            OpenAI / Azure OpenAI Client
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.InternalCompleteTextAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Creates completions for the prompt and settings.
            </summary>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Completions generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.InternalCompletionStreamAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Creates completions streams for the prompt and settings.
            </summary>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Stream the completions generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.InternalGenerateTextEmbeddingsAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="data"/>.
            </summary>
            <param name="data">List of strings to generate embeddings for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of embeddings</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.InternalGenerateChatMessageAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Generate a new chat message
            </summary>
            <param name="chat">Chat history</param>
            <param name="requestSettings">AI request settings</param>
            <param name="cancellationToken">Async cancellation token</param>
            <returns>Generated chat message in string format</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.InternalGenerateChatMessageStreamAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Generate a new chat message stream
            </summary>
            <param name="chat">Chat history</param>
            <param name="requestSettings">AI request settings</param>
            <param name="cancellationToken">Async cancellation token</param>
            <returns>Streaming of generated chat message in string format</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.InternalCreateNewChat(System.String)">
            <summary>
            Create a new empty chat instance
            </summary>
            <param name="instructions">Optional chat instructions for the AI service</param>
            <returns>Chat object</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.ClientBase.InternalCompleteTextUsingChatAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Creates a completion for the prompt and settings using the chat endpoint
            </summary>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Text generated by the remote model</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.OpenAIClientBase.Client">
            <summary>
            OpenAI / Azure OpenAI Client
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.AzureSdk.OpenAIClientBase.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create an instance of the OpenAI connector
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion">
            <summary>
            Azure OpenAI chat completion client.
            TODO: forward ETW logging to ILogger, see https://learn.microsoft.com/en-us/dotnet/azure/sdk/logging
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create an instance of the Azure OpenAI chat completion connector with API key auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion.#ctor(System.String,System.String,Azure.Core.TokenCredential,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create an instance of the Azure OpenAI chat completion connector with AAD auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credentials">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion.GenerateMessageAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion.GenerateMessageStreamAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion.CreateNewChat(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion.GetStreamingCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.AzureChatCompletion.GetCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatCompletion">
            <summary>
            OpenAI chat completion client.
            TODO: forward ETW logging to ILogger, see https://learn.microsoft.com/en-us/dotnet/azure/sdk/logging
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatCompletion.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create an instance of the OpenAI chat completion connector
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatCompletion.GenerateMessageAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatCompletion.GenerateMessageStreamAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatCompletion.CreateNewChat(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatCompletion.GetStreamingCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatCompletion.GetCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatHistory">
            <summary>
            OpenAI Chat content
            See https://platform.openai.com/docs/guides/chat for details
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatHistory.#ctor(System.String)">
            <summary>
            Create a new and empty chat history
            </summary>
            <param name="assistantInstructions">Optional instructions for the assistant</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatHistory.AddSystemMessage(System.String)">
            <summary>
            Add a system message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatHistory.AddAssistantMessage(System.String)">
            <summary>
            Add an assistant message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion.OpenAIChatHistory.AddUserMessage(System.String)">
            <summary>
            Add a user message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase">
            <summary>Base type for OpenAI clients.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase"/> class.
            </summary>
            <param name="httpClient">The HttpClient used for making HTTP requests.</param>
            <param name="logger">The ILogger used for logging. If null, a NullLogger instance will be used.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase.AddRequestHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>Adds headers to use for OpenAI HTTP requests.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase.ExecuteTextEmbeddingRequestAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a text embedding request for the text.
            </summary>
            <param name="url">URL for the text embedding request API</param>
            <param name="requestBody">Request payload</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of text embeddings</returns>
            <exception cref="T:Microsoft.SemanticKernel.AI.AIException">AIException thrown during the request.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase.ExecuteImageGenerationRequestAsync(System.String,System.String,System.Func{Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationResponse.Image,System.String},System.Threading.CancellationToken)">
            <summary>
            Run the HTTP request to generate a list of images
            </summary>
            <param name="url">URL for the image generation request API</param>
            <param name="requestBody">Request payload</param>
            <param name="extractResponseFunc">Function to invoke to extract the desired portion of the image generation response.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of image URLs</returns>
            <exception cref="T:Microsoft.SemanticKernel.AI.AIException">AIException thrown during the request.</exception>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase._log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.CustomClient.OpenAIClientBase._httpClient">
            <summary>
            The HttpClient used for making HTTP requests.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationRequest">
            <summary>
            Image generation request
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationRequest.Prompt">
            <summary>
            Image prompt
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationRequest.Size">
            <summary>
            Image size
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationRequest.Count">
            <summary>
            How many images to generate
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationRequest.Format">
            <summary>
            Image format, "url" or "b64_json"
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationResponse">
            <summary>
            Image generation response
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationResponse.Image">
            <summary>
            OpenAI Image response
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationResponse.Image.Url">
            <summary>
            URL to the image created
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationResponse.Image.AsBase64">
            <summary>
            Image content in base64 format
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationResponse.Images">
            <summary>
            List of possible image generations
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.ImageGenerationResponse.CreatedTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.OpenAIImageGeneration.OpenAIEndpoint">
            <summary>
            OpenAI REST API endpoint
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.OpenAIImageGeneration._organizationHeaderValue">
            <summary>
            Optional value for the OpenAI-Organization header.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.OpenAIImageGeneration._authorizationHeaderValue">
            <summary>
            Value for the authorization header.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.OpenAIImageGeneration.#ctor(System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create a new instance of OpenAI image generation service
            </summary>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="organization">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.OpenAIImageGeneration.AddRequestHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>Adds headers to use for OpenAI HTTP requests.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.ImageGeneration.OpenAIImageGeneration.GenerateImageAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.AzureTextCompletion">
            <summary>
            Azure OpenAI text completion client.
            TODO: forward ETW logging to ILogger, see https://learn.microsoft.com/en-us/dotnet/azure/sdk/logging
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.AzureTextCompletion.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new AzureTextCompletion client instance using API Key auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.AzureTextCompletion.#ctor(System.String,System.String,Azure.Core.TokenCredential,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new AzureTextCompletion client instance supporting AAD auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credential">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.AzureTextCompletion.GetStreamingCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.AzureTextCompletion.GetCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.OpenAITextCompletion">
            <summary>
            OpenAI text completion service.
            TODO: forward ETW logging to ILogger, see https://learn.microsoft.com/en-us/dotnet/azure/sdk/logging
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.OpenAITextCompletion.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create an instance of the OpenAI text completion connector
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.OpenAITextCompletion.GetStreamingCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextCompletion.OpenAITextCompletion.GetCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.AzureTextEmbeddingGeneration">
            <summary>
            Azure OpenAI text embedding service.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.AzureTextEmbeddingGeneration.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new AzureTextCompletion client instance using API Key auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.AzureTextEmbeddingGeneration.#ctor(System.String,System.String,Azure.Core.TokenCredential,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new AzureTextCompletion client instance supporting AAD auth
            </summary>
            <param name="modelId">Azure OpenAI model ID or deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credential">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.AzureTextEmbeddingGeneration.GenerateEmbeddingsAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="data"/>.
            </summary>
            <param name="data">List of strings to generate embeddings for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of embeddings</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.OpenAITextEmbeddingGeneration">
            <summary>
            OpenAI text embedding service.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.OpenAITextEmbeddingGeneration.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create an instance of the OpenAI text embedding connector
            </summary>
            <param name="modelId">Model name</param>
            <param name="apiKey">OpenAI API Key</param>
            <param name="organization">OpenAI Organization Id (usually optional)</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.OpenAITextEmbeddingGeneration.GenerateEmbeddingsAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="data"/>.
            </summary>
            <param name="data">List of strings to generate embeddings for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of embeddings</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.TextEmbeddingRequest">
            <summary>
            A request to create embedding vector representing input text
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.TextEmbeddingRequest.Input">
            <summary>
            Input to embed
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.OpenAITextEmbeddingRequest">
            <summary>
            An OpenAI embedding request
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.OpenAITextEmbeddingRequest.Model">
            <summary>
            Embedding model ID
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.AzureTextEmbeddingRequest">
            <summary>
            An Azure OpenAI embedding request
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.TextEmbeddingResponse">
            <summary>
            A response from an embedding request
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.TextEmbeddingResponse.EmbeddingResponseIndex">
            <summary>
            A single embedding vector
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.TextEmbeddingResponse.EmbeddingResponseIndex.Values">
            <summary>
            The embedding vector
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.TextEmbeddingResponse.EmbeddingResponseIndex.Index">
            <summary>
            Index of the embedding vector
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.TextEmbedding.TextEmbeddingResponse.Embeddings">
            <summary>
            A list of embeddings
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.GPT3Tokenizer">
            <summary>
            Port of GPT3 Javascript tokenizer recommended by OpenAI.
            See https://platform.openai.com/tokenizer and
            https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.GPT3Tokenizer.s_bytesToUnicode">
            <summary>Lookup table from byte (index) to associated char.</summary>
            <remarks>Computed result of function at https://github.com/openai/gpt-2/blob/a74da5d99abaaba920de8131d64da2862a8f213b/src/encoder.py#L9-L28.</remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.GPT3Tokenizer.s_encodingRegex">
            <summary>
            Regex for English contractions, e.g. "he's", "we'll", "I'm" etc.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.GPT3Tokenizer.Encode(System.String)">
            <summary>
            The tokenizer uses a byte-pair encoding (BPE) algorithm to split words into
            sub-words based on frequency and merges rules. It can handle out-of-vocabulary
            words, punctuation, and special tokens.
            </summary>
            <param name="text">Text to tokenize</param>
            <returns>List of token IDs</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.Settings.EmbeddedResource.ReadBytePairEncodingTable">
            <summary>
            Return content of BPE file.
            </summary>
            <returns>BPE file content</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.Settings.EmbeddedResource.ReadEncodingTable">
            <summary>
            Return content of encoding table file.
            </summary>
            <returns>Encoding table string</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.Settings.EmbeddedResource.ReadFile(System.String)">
            <summary>
            Read a content file embedded in the project. Files are read from disk,
            not from the assembly, to avoid inflating the assembly size.
            </summary>
            <param name="fileName">Filename to read</param>
            <returns>File content</returns>
            <exception cref="T:System.IO.FileNotFoundException">Error in case the file doesn't exist</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.Settings.GPT3Settings.Encoder">
            <summary>Gets the cached encoding table (encoder.json).</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.Settings.GPT3Settings.BpeRanks">
            <summary>Gets the cached byte pair encoding table (vocab.bpe).</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.Settings.GPT3Settings.s_encoder">
            <summary>Lazy load the cached encoding table (encoder.json).</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Connectors.AI.OpenAI.Tokenizers.Settings.GPT3Settings.s_bpeRanks">
            <summary>Lazy load the cached byte pair encoding table (vocab.bpe).</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddAzureTextCompletionService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds an Azure OpenAI text completion service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddAzureTextCompletionService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,Azure.Core.TokenCredential,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds an Azure OpenAI text completion service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credentials">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddOpenAITextCompletionService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds the OpenAI text completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddAzureTextEmbeddingGenerationService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds an Azure OpenAI text embeddings service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddAzureTextEmbeddingGenerationService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,Azure.Core.TokenCredential,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds an Azure OpenAI text embeddings service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credentials">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddOpenAITextEmbeddingGenerationService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds the OpenAI text embeddings service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddAzureChatCompletionService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,System.String,System.Boolean,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds the Azure OpenAI ChatGPT completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="alsoAsTextCompletion">Whether to use the service also for text completion, if supported</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddAzureChatCompletionService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,Azure.Core.TokenCredential,System.Boolean,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds the Azure OpenAI ChatGPT completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credentials">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="alsoAsTextCompletion">Whether to use the service also for text completion, if supported</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddOpenAIChatCompletionService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,System.String,System.Boolean,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds the OpenAI ChatGPT completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="alsoAsTextCompletion">Whether to use the service also for text completion, if supported</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelConfigOpenAIExtensions.AddOpenAIImageGenerationService(Microsoft.SemanticKernel.KernelConfig,System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Add the OpenAI DallE image generation service to the list
            </summary>
            <param name="config">The kernel config instance</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <param name="logger">Application logger</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithAzureTextCompletionService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,System.String,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds an Azure OpenAI text completion service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithAzureTextCompletionService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,Azure.Core.TokenCredential,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds an Azure OpenAI text completion service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credentials">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithOpenAITextCompletionService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,System.String,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds the OpenAI text completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithAzureTextEmbeddingGenerationService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,System.String,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds an Azure OpenAI text embeddings service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithAzureTextEmbeddingGenerationService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,Azure.Core.TokenCredential,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds an Azure OpenAI text embeddings service to the list.
            See https://learn.microsoft.com/azure/cognitive-services/openai for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credential">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithOpenAITextEmbeddingGenerationService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,System.String,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds the OpenAI text embeddings service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithAzureChatCompletionService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds the Azure OpenAI ChatGPT completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="apiKey">Azure OpenAI API key, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="alsoAsTextCompletion">Whether to use the service also for text completion, if supported</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithAzureChatCompletionService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,Azure.Core.TokenCredential,System.Boolean,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds the Azure OpenAI ChatGPT completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="deploymentName">Azure OpenAI deployment name, see https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource</param>
            <param name="endpoint">Azure OpenAI deployment URL, see https://learn.microsoft.com/azure/cognitive-services/openai/quickstart</param>
            <param name="credentials">Token credentials, e.g. DefaultAzureCredential, ManagedIdentityCredential, EnvironmentCredential, etc.</param>
            <param name="alsoAsTextCompletion">Whether to use the service also for text completion, if supported</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithOpenAIChatCompletionService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Adds the OpenAI ChatGPT completion service to the list.
            See https://platform.openai.com/docs for service details.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="modelId">OpenAI model name, see https://platform.openai.com/docs/models</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="alsoAsTextCompletion">Whether to use the service also for text completion, if supported</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.WithOpenAIImageGenerationService(Microsoft.SemanticKernel.KernelBuilder,System.String,System.String,System.String,System.Boolean,System.Net.Http.HttpClient)">
            <summary>
            Add the OpenAI DallE image generation service to the list
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/> instance</param>
            <param name="apiKey">OpenAI API key, see https://platform.openai.com/account/api-keys</param>
            <param name="orgId">OpenAI organization id. This is usually optional unless your account belongs to multiple organizations.</param>
            <param name="serviceId">A local identifier for the given AI service</param>
            <param name="setAsDefault">Whether the service should be the default for its type.</param>
            <param name="httpClient">Custom <see cref="T:System.Net.Http.HttpClient"/> for HTTP requests.</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.OpenAIKernelBuilderExtensions.GetHttpClient(Microsoft.SemanticKernel.KernelConfig,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <param name="config">The kernel configuration.</param>
            <param name="httpClient">An optional pre-existing instance of HttpClient.</param>
            <param name="logger">An optional logger.</param>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType">
            <summary>
            Contains the values of status codes defined for HTTP in the response to an HTTP request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Continue">
            <summary>
            The server has received the request headers and the client should proceed to send the request body.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.SwitchingProtocols">
            <summary>
            The server is switching protocols according to the Upgrade header sent by the client.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Processing">
            <summary>
            The server is processing the request, but has not completed it yet.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.EarlyHints">
            <summary>
            The server is sending some hints about the response before the final status code.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.OK">
            <summary>
            The request has succeeded and the response contains the requested resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Created">
            <summary>
            The request has been fulfilled and a new resource has been created.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Accepted">
            <summary>
            The request has been accepted for further processing, but the processing has not been completed.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NonAuthoritativeInformation">
            <summary>
            The server is returning a response from a different source than the requested one, but the response is still valid.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NoContent">
            <summary>
            The request has been successfully processed, but the server does not need to return any content.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ResetContent">
            <summary>
            The server has fulfilled the request and the client should reset the document view.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PartialContent">
            <summary>
            The server is returning a partial response to a range request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MultiStatus">
            <summary>
            The server is returning a response that contains multiple status codes for different parts of the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.AlreadyReported">
            <summary>
            The server has already reported the status of the request and does not need to repeat it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.IMUsed">
            <summary>
            The server is returning a response that is the result of applying a delta encoding to the requested resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Ambiguous">
            <summary>
            The requested resource has multiple representations and the client should choose one of them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MultipleChoices">
            <summary>
            The requested resource has multiple representations and the client should choose one of them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Moved">
            <summary>
            The requested resource has been permanently moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MovedPermanently">
            <summary>
            The requested resource has been permanently moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Found">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Redirect">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RedirectMethod">
            <summary>
            The requested resource can be found at a different URI and the client should use a GET method to retrieve it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.SeeOther">
            <summary>
            The requested resource can be found at a different URI and the client should use a GET method to retrieve it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotModified">
            <summary>
            The requested resource has not been modified since the last request and the client can use the cached version.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UseProxy">
            <summary>
            The requested resource is only available through a proxy and the client should use the proxy URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Unused">
            <summary>
            This status code is no longer used and is reserved for future use.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RedirectKeepVerb">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the same method to access it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.TemporaryRedirect">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the same method to access it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PermanentRedirect">
            <summary>
            The requested resource has been permanently moved to a new location and the client should use the same method to access it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.BadRequest">
            <summary>
            The server cannot process the request due to a malformed syntax or an invalid parameter.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Unauthorized">
            <summary>
            The request requires authentication and the client should provide valid credentials.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PaymentRequired">
            <summary>
            The request requires payment and the client should provide valid payment information.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Forbidden">
            <summary>
            The server has understood the request, but refuses to authorize it due to insufficient permissions or other reasons.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotFound">
            <summary>
            The server cannot find the requested resource and the client should not repeat the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MethodNotAllowed">
            <summary>
            The server does not support the method used by the request and the client should use a different method.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotAcceptable">
            <summary>
            The server cannot produce a response that matches the preferences specified by the request headers.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ProxyAuthenticationRequired">
            <summary>
            The request requires authentication through a proxy and the client should provide valid proxy credentials.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestTimeout">
            <summary>
            The server did not receive the complete request within the time limit and the client should try again later.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Conflict">
            <summary>
            The request could not be completed due to a conflict with the current state of the resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Gone">
            <summary>
            The requested resource is no longer available and the server does not know the new location.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.LengthRequired">
            <summary>
            The request requires a Content-Length header and the client should provide it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PreconditionFailed">
            <summary>
            The request does not meet the preconditions specified by the request headers and the server cannot process it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestEntityTooLarge">
            <summary>
            The request entity is too large and the server cannot process it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestUriTooLong">
            <summary>
            The request URI is too long and the server cannot process it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UnsupportedMediaType">
            <summary>
            The request entity has a media type that the server does not support or cannot handle.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestedRangeNotSatisfiable">
            <summary>
            The request specifies a range that the server cannot satisfy or is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ExpectationFailed">
            <summary>
            The request contains an Expect header that the server cannot meet or is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MisdirectedRequest">
            <summary>
            The request was directed to a server that is not able to produce a response.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UnprocessableEntity">
            <summary>
            The request entity is well-formed, but cannot be processed by the server due to semantic errors.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Locked">
            <summary>
            The requested resource is locked and the client should release it before modifying it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.FailedDependency">
            <summary>
            The request failed due to a dependency on another request that failed.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UpgradeRequired">
            <summary>
            The request requires the server to upgrade to a different protocol and the client should use the Upgrade header to specify it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PreconditionRequired">
            <summary>
            The request requires the server to apply preconditions and the client should use the If-Match or If-Unmodified-Since headers to specify them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.TooManyRequests">
            <summary>
            The client has sent too many requests in a given time and the server rejects them to prevent overload.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestHeaderFieldsTooLarge">
            <summary>
            The request contains headers that are too large and the server cannot process them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UnavailableForLegalReasons">
            <summary>
            The server is denying access to the requested resource for legal reasons and the client should not repeat the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.InternalServerError">
            <summary>
            The server encountered an unexpected error and cannot fulfill the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotImplemented">
            <summary>
            The server does not support the functionality required by the request and the client should not repeat the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.BadGateway">
            <summary>
            The server received an invalid response from an upstream server and cannot fulfill the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ServiceUnavailable">
            <summary>
            The server is temporarily unavailable due to maintenance or overload and the client should try again later.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.GatewayTimeout">
            <summary>
            The server did not receive a timely response from an upstream server and cannot fulfill the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.HttpVersionNotSupported">
            <summary>
            The server does not support the HTTP version used by the request and the client should use a different version.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.VariantAlsoNegotiates">
            <summary>
            The server has a configuration error and cannot negotiate a suitable representation for the requested resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.InsufficientStorage">
            <summary>
            The server has insufficient storage space to complete the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.LoopDetected">
            <summary>
            The server detected an infinite loop while processing the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotExtended">
            <summary>
            The request requires additional extensions that the server does not support or cannot handle.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NetworkAuthenticationRequired">
            <summary>
            The request requires authentication at the network level and the client should provide valid network credentials.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.Verify.ParametersUniqueness(System.Collections.Generic.IList{Microsoft.SemanticKernel.SkillDefinition.ParameterView})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:NonDisposableHttpClientHandler">
            <summary>
            Represents a singleton implementation of <see cref="T:System.Net.Http.HttpClientHandler"/> that is not disposable.
            </summary>
        </member>
        <member name="M:NonDisposableHttpClientHandler.#ctor">
            <summary>
            Private constructor to prevent direct instantiation of the class.
            </summary>
        </member>
        <member name="P:NonDisposableHttpClientHandler.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:NonDisposableHttpClientHandler"/>.
            </summary>
        </member>
        <member name="M:NonDisposableHttpClientHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying resources held by the <see cref="T:NonDisposableHttpClientHandler"/>.
            This implementation does nothing to prevent unintended disposal, as it may affect all references.
            </summary>
            <param name="disposing">True if called from <see cref="M:NonDisposableHttpClientHandler.Dispose(System.Boolean)"/>, false if called from a finalizer.</param>
        </member>
    </members>
</doc>
