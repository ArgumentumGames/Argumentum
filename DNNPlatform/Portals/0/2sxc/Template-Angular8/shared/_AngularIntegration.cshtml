@*
  These helpers are used by the CSHTML code which loads the angular app.
  They do a bunch of things, like switching between testing/live code and more.
*@
@using DotNetNuke.Framework;
@using System.Linq;
@using System.Text.RegularExpressions;
@using System.Web.Helpers;
@functions {
  public string 
    AppName,
    AppTag,
    DefaultEdition,         // the default edition if nothing is set
    LocalDevEdition,        // the edition that should get angular from the local server
    CurrentEdition,         // the current edition of this app
    EditionCookieName,      // the cookie name to store the edition when developing / testing
    LocalDevServer;
  public string[] Editions; // list of editions this app has
  
  // Store all the editions parameters for further use
  public void Configure(string appName = null, string appTag = null, string[] editions = null, string defaultEdition = null, string localDevEdition = null, string localDevServer = null) {
    AppName = appName ?? "ng-app";
    AppTag = appTag ?? "app-root";
    DefaultEdition = defaultEdition ?? "live";
    Editions = editions ?? new string[] {"live", "staging", "local"};
    LocalDevEdition = localDevEdition ?? "local";
    LocalDevServer = localDevServer ?? "http://localhost:4200";

    // the cookie uses the app-id as part of the key, so it won't interfere with other apps
    EditionCookieName = CookieNameTemplate.Replace("#", App.AppId.ToString());
    CurrentEdition = GetEditionFromCookie(DefaultEdition);
  }

}

@*  
  set the html base href - important for Angular apps to work 
  also activate 2sxc helper JS for the integration and API calls to automatically work
*@
@helper AddBaseTagAndCoreJs() {
  // this is a special syntax to get the right url
  // it's important, because otherwise certain pages like home won't actually have the right base path
  <base href='@(Link.To(parameters: " ").Trim())'>
  <script type="text/javascript" src="~/desktopmodules/tosic_sexycontent/js/2sxc.api.min.js"></script>
}



@* 
  This takes the html file generated by angular and adds all the necessary parts to the HTML output of this page
*@
@helper LoadFromDnn() {
  @Html.Raw(LoadAngularHtmlAndPrepareForUse(AppName))
}



@* 
  This adds the tag and JS files needed to hot-load the angular app 
*@
@helper LoadFromLocalDev() {
  @Html.Raw("<" + AppTag + AppAttributes() + ">" 
    + "This would load all scripts from " + LocalDevServer + ". If you see this message, your local dev is either not running, or the configuration is wrong. <br>"
    + "To make sure you're doing things right, please follow <a href='https://azing.org/2sxc/r/oCmPBI3p' target='_blank'>these instructions</a>."
    + "</" + AppTag + ">")
  <script src="@LocalDevServer/runtime.js" type="module"></script>
  <script src="@LocalDevServer/polyfills.js" type="module"></script>
  <script src="@LocalDevServer/styles.js" type="module"></script>
  <script src="@LocalDevServer/vendor.js" type="module"></script>
  <script src="@LocalDevServer/main.js" type="module"></script>
}


@*
  Show the toolbar to select an edition - usually only for the superuser / developer
*@
@helper ShowEditionSelectorForThisApp() {
  <div class="alert alert-info">
      <p>Change edition</p>
      <div class="btn-group">
        @foreach(var name in Editions) {
          <button 
            type="button"
            onclick="sxcAngularApp.setEdition('@name')" 
            class='btn btn-default @(name == CurrentEdition ? "selected" : "not-selected")'>
              @name
          </button>        }
      </div>
  </div>

  <script>
    window.sxcAngularApp = {
      // Source: https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript
      setCookie: function setCookie(name,value,days) {
        var expires = "";
        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + (days*24*60*60*1000));
          expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "")  + expires + "; path=/";
      },
      eraseCookie: function eraseCookie(name) {   
        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';
      },
      setEdition: function setEdition(edition) {
        let cookieName = '@EditionCookieName';
        if(edition)
          this.setCookie(cookieName, edition);
        else
          this.eraseCookie(cookieName);

        // reload page, preserving hash & angular route
        location.reload();
      }
    }
  </script>

  <style>
    button.selected { font-weight: bold; text-decoration: underline; }
    button.not-selected { }
  </style>
}


@* 
  private functions 
*@
@functions {
  private const string CookieNameTemplate = "polymorph-app-#-edition"; // the cookie name to store the edition when developing / testing

  // Get the edition from the cookie
  private string GetEditionFromCookie(string defaultEdition) {
    var key = EditionCookieName;

    return Request.Cookies.AllKeys.Contains(key) 
      ? Request.Cookies[key].Value 
      : defaultEdition;
  }

  // load the Angular generated html file and keep only the important parts
  private string LoadAngularHtmlAndPrepareForUse(string appName) {
    // 1. build the path to where the angular app is stored
    var resourcesPath = App.Path + "/" + CurrentEdition + "/dist/" + appName;
    var indexFile = resourcesPath + "/index.html";
    string html_orig;

    // 2. Read body contents from index.html
    try {
      html_orig = System.IO.File.ReadAllText(Server.MapPath(indexFile));
    } catch {
      return "Error trying to access '" + indexFile + "' - it probably doesn't exist";
    }

    // 3.1. Get only the body contents
    var html = Regex.Match(html_orig, "<body>(.*?)</body>", RegexOptions.Singleline).Groups[1].Value;

    // 3.2. Get stylesheets
    html += Regex.Match(html_orig, "<link rel=\"stylesheet\".*?>", RegexOptions.Singleline).Groups[0].Value;

    // 4. Change stylesheet and script paths
    html = Regex.Replace(html, "(src|href)=\"(.*?)\"", "$1=\"" + resourcesPath + "/$2\"");

    // 5. find the app-tag, and add the edition
    html = html.Replace("<" + AppTag + ">", "<" + AppTag + AppAttributes() + ">");

    return html;
  }

  private string AppAttributes() {
    return " "
      + Attribute("edition", CurrentEdition)
      + Attribute("api-edition", CurrentEdition)
      // get anti-forgery token into the attributes
      + Attribute("anti-forgery-token", AntiForgeryToken())
      + Attribute("module-id", Dnn.Module.ModuleID.ToString())
      + Attribute("tab-id", Dnn.Tab.TabID.ToString())
      ;
  }
  
  private string Attribute(string key, string value) {
    return " " + key + "=\"" + value + "\" ";
  }

  public string AntiForgeryToken() {
    if(_antiForgeryToken == null) {
      var tag = AntiForgery.GetHtml().ToString();
      _antiForgeryToken = GetAttribute(tag, "value");
    }
    return _antiForgeryToken;
  }
  private string _antiForgeryToken;

  private string GetAttribute(string tag, string attribute) {
    return new Regex(@"(?<=\b" + attribute + @"="")[^""]*")
      .Match(tag).Value;
  }
}