@inherits ToSic.Sxc.Dnn.RazorComponent
<hide>
@RenderPage("_header.cshtml")
</hide>
@using ToSic.Razor.Blade;
@using System.Linq;

<h2>Working with Entity (Item) Values</h2>
<trim>
  <p>
    Every <em>item</em> a.k.a. <em>object</em> is called an <a href="https://docs.2sxc.org/specs/data/entities.html" target="_blank"><strong>Entity</strong></a>. 
    Entities will have properties like <code>Name</code>, <code>ProductNumber</code> or <code>Birthday</code>, depending on the <a href="https://docs.2sxc.org/specs/data/content-types.html" target="_blank"><strong>Content-Type</strong></a> they represent. 
  </p>
  <h3>How your Razor Code receives Entities</h3>
  <p>
    When things are configured correctly, the right entities are given to your Razor-template so you can just show them or perform calculations as you need them. These are the common ways for the entities to be provided to your template:
  </p>
  <ol>
    <li>On simple templates, the UI allows users to add/edit content of a specific type (configured in the View). This content Entity is always available in your code in the variable called <code>Content</code>. </li>
    <li>On templates which expect many items of the same type, <code>Content</code> contains the first item only, and to access all (for iterating and showing each one) the Entities are in a variable called <code>Data</code>.</li>
    <li>If your code needs to find other data in the App, it can access it through <code>App.Data</code>.</li>
    <li>If your code want to get Entities which have been pre-selected/filtered etc. through a query, it will get them from <code>App.Query</code></li>
  </ol>
  <p>
    In this example the template is configured to contain an Entity of the type <code>Person</code> and has these fields:
  </p>
  <ul>
    <li>FirstName: a string (text)</li>
    <li>LastName: a string</li>
    <li>Birthday: a date</li>
    <li>Mugshot: a link to an image file</li>
    <li>Awards: a reference to one or more other Entities which describe awards</li>
  </ul>
  <p>
    So the following examples will show how to put the values in these fields into the HTML. The current item is always available on the variable called <code>Content</code>. It's a <code>dynamic</code> object, so you can just type things like <code>@@Content.FirstName</code> to access the properties. 
  </p>
</trim>


<hr>
<h3>Show Entity Values</h3>
<img src="@Content.Mugshot?w=100&h=100&mode=crop" align="right" style="border-radius: 50%">
<ul>
  <li>Name: @Content.FirstName @Content.LastName</li>
  <li>Birthday: @Content.Birthday.ToString("d")</li>
  <li>Award: @Content.Awards.Name</li>
</ul>

<trim>
<p>Note that <code>Awards</code> refers to other Entities of the type <code>PersonAwards</code> and has properties like <code>Name</code>. The above example showed the award Name using <code>@@Content.Awards.Name</code> - which makes sense when you only expect one award. In other tutorials you'll see how to work with such related Entities if there are more than one.  
</trim>

<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>