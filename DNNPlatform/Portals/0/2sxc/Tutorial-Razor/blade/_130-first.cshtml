@inherits ToSic.Sxc.Dnn.RazorComponent
@using ToSic.Razor.Blade;
<hide>
@RenderPage("_header.cshtml")
@{  
  var hlp = CreateInstance("../shared/_helpers.cshtml"); 
  var rzrHelp = CreateInstance("_api-docs.cshtml");
}
</hide>

<trim>
  <h2><em>RazorBlade</em> Text.First(...) <em>v3</em></h2>
  <p>
    These demos show how to get the first <em>real</em> text of a series of values. Basically it will ignore nulls, empty texts, space-strings and even combinations containing empty lines, html-nbsps and more. Internally it uses @hlp.TutLink("Text.Has(...)", "blade120/page").
  </p>

  @rzrHelp.ApiLinks(new string[] { 
    "Text.First(...)", "https://razor-blade.net/api/ToSic.Razor.Blade.Text.html#ToSic_Razor_Blade_Text_First_System_String_System_String_System_Boolean_", 
    "Text.Has(...)", "https://razor-blade.net/api/ToSic.Razor.Blade.Text.html#ToSic_Razor_Blade_Text_Has_System_Object_System_Boolean_",
  })
</trim>

@{
    var val1 = "John";
    var val2 = "Michael";
    var spc = "   ";
    var fallback = "please-enter-name";
    var nbsp = "&nbsp;";
}

<trim>
  <h2>Demos</h2>

  <h3>Basic 2-Value Demos</h3>
</trim>
<ol>
    <li>
      <code>Text.First(null, @val1)</code> 
      ⇒ @Text.First(null, val1)
    </li>
    <li>
      <code>Text.First(null, null)</code> 
      ⇒ @Text.First(null, null)
    </li>
    <li>
      <code>Text.First(@val1, @val2)</code> 
      ⇒ @Text.First(val1, val2)
    </li>
    <li>
      <code>Text.First("@spc" = 3 spaces, @val1)</code> 
      ⇒ @Text.First(spc, val1)
    </li>
    <li>
      <code>Text.First(null, @fallback)</code> 
      ⇒ @Text.First(null, fallback)
    </li>
    <li>
      <code>Text.First(@nbsp, @fallback)</code>
      ⇒ @Text.First(nbsp, fallback)
    </li>
    <li>
      <code>Text.First(false, @nbsp, @fallback)</code> 
      ⇒ @Text.First(false, nbsp, fallback) <br>
        <em></em>"false" at the end means don't treat html-whitespace as whitespace, so @nbsp will be treated as a real value</em>
    </li>
</ol>

<trim>
  <h3>3-5 Value Demos</h3>
  <p>
      Text.First has overloads (multiple signatures) for up to 5 values, and another one accepting an array of string objects so you can even use it for 10 values if you really need it. 
  </p>
</trim>
<ol>
    <li>
      <code>Text.First(null, @val1, @fallback)</code> 
      ⇒ @Text.First(null, val1, fallback)
    </li>
    <li>
      <code>Text.First(null, @val1, @val2, @fallback)</code> 
      ⇒ @Text.First(null, val1, val2, fallback)
    </li>
    <li>
      <code>Text.First(null, @nbsp, @val1, @val2, @fallback)</code> 
      ⇒ @Text.First(null, nbsp, val1, val2, fallback)
    </li>
    <li>
      <code>Text.First(false, null, @nbsp, @val1, @val2, @fallback)</code> 
      ⇒ @Text.First(false, null, nbsp, val1, val2, fallback)
    </li>
    <li>
      <code>Text.First(null, null, @nbsp, @val1, @val2, "@spc", @fallback)</code> 
      ⇒ @Text.First(null, null, nbsp, val1, val2, spc, fallback)
    </li>
    <li>
      <code>Text.First(false, null, null, @nbsp, @val1, @val2, "@spc", @fallback)</code> 
      ⇒ @Text.First(false, null, null, nbsp, val1, val2, spc, fallback)
    </li>
</ol>

<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>