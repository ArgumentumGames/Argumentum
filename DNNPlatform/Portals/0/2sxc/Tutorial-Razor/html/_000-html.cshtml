<hide>
@RenderPage("_header.cshtml")
</hide>

@{
  var normalText = "this is text, it doesn't have tags";
  var htmlText = "this string <em>has</em> html <strong>tags</strong>";
}
<trim>
<h3>Show the variables as is</h3>
<p>This uses the basic <code>@@variableName</code> syntax. This will result in encoding html, so tags in that variable will be shown as html-source.</p>
</trim>
<ul>
  <li>@normalText</li>
  <li>@htmlText</li>
</ul>

<trim>
<hr>
<h2>Encode using <code>@@Html.Raw(...)</code> or <code>@@:...</code></h2>
</trim>
<ul>
  <li>@Html.Raw(normalText)</li>
  <li>@Html.Raw(htmlText)</li>
</ul>

<em>By the way: if you're only working on newer DNNs like 9.x, you can also use <code>@@:...</code> as a shorter version of Html.Raw</em>

<trim>
<hr>
<h2>Reusing a Snippet using <code>@@helper</code></h2>
<p>Razor Helpers are like functions, which you can call again and again to produce html. What makes them special is that you can write html into the function, just like normal razor code. </p>
</trim>
<ul>
  @BoldLi(normalText)
  @BoldLi(htmlText)
  @BoldLi("this is just a bold line")
</ul>

@helper BoldLi(string label) {
  <li>
    <strong>
      @Html.Raw(label)
    </strong>
  </li>
}

<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>