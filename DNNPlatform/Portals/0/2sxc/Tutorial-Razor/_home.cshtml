@inherits ToSic.Sxc.Dnn.RazorComponent
<hide>
@{  var hlp = CreateInstance("shared/_helpers.cshtml"); }
@hlp.Title("Razor Tutorial - Home (" + App.Configuration.Version + ")")
</hide>
@{
  ToSic.Razor.Blade.HtmlPage.AddBase();
}
<trim>
<h2>How to use this Tutorial</h2>
<p>
  Below you'll find a list of topics this tutorial covers. The easiest way to work with it is to look at an example, then look at the code shown below the examples. You can also modify the source files and see what happens :)
</p>
</trim>

<hr>
<h2>Razor Basics</h2>

<ol>
  @hlp.TutorialLinkHome("Very Basics", "basics", "Basic use of Razor with variables, loops, conditions etc.")

  @hlp.TutorialLinkHome("Working with HTML", "html", "Learn the difference of showing variables with <code>@variable</code> and <code>@Html.Raw(variable)</code>, and re-using snippets with <code>@helper</code>")

  @hlp.TutorialLinkHome("Using Emojis / Emoticons üëç", "html210", "Show Emojis in your output or use them for showing true/false", "")

  @hlp.TutorialLinkHome("Reuse templates and code", "reuse", "You can place common templates, hlp and functions into shared files - both <code>.cshtml</code> and <code>.cs</code>. And you can split Razor files into code and templates.", "enhanced for v11")
</ol>

<hr>
<h2>Working with Content &amp; Data</h2>
<p>In most cases a template will run in a context - so something prepared data for the template, which should now be visualized. These examples assume you're working with 2sxc, which lets editors work with content - and your template only needs to visualize it.</p>

<ol>
  @hlp.TutorialLinkHome("Working with Entity (Item) Values", "entity", "Every <em>thing</em> is an <strong>Entity</strong>. Here some basic examples how to show values like Name, Birthday etc. of such an Entity.", "new in 10.27")

  @hlp.TutorialLinkHome("Visualize current Content", "content", "Show content which was entered for this module", "enhanced in 10.27")

  @hlp.TutorialLinkHome("Visualize Data", "data", "Show data from DNN, the current App, DataSources or SQL, CSV etc. Also includes list/details (parent/child) examples.", "enhanced!")

  @hlp.TutorialLinkHome("Visualize JSON", "json", "Easily work with JSON data.", "new!")

  @hlp.TutorialLinkHome("LINQ Examples", "linq", "The following examples show how to use LINQ (Language INtegrated Query) to sort, filter and group data. This is for quick work in your views - for more extensive querying, we recommend the Visual Query Designer. ")
</ol>


<hr>
<h2>Customize Edit UI / UX</h2>
<p>Sometimes you want to customize what the editor will experience - using special toolbars or custom input fields. Note that this only applies to 2sxc.</p>

<ol>
  @hlp.TutorialLinkHome("Customize the Edit Experience", "ui", "Customize the editor experience by providing great toolbars or custom input fields", "new in v11")

</ol>





<hr>
@hlp.TitleLogo("blade/assets/app-icon.png", "https://github.com/2sic/razor-blade")
<h2><em>RazorBlade</em> Examples</h2>
<p>These examples help you quickly do hard stuff, once you've mastered the basics above</p>
<ol>
  @hlp.TutorialLinkHome("RazorBlade - Making real tasks easier", "blade", "Properly create preview-texts, strip HTML, pick the right variables, set page titles and way more. Includes...", "enhanced!")
  <ul>
    <li>Text manipulation, clean-up, cropping and ellipsis</li>
    <li>Picking the ideal string-values</li>
    <li>Html stripping for teasers and to protect against XSS</li>
    <li>Convert html to text and back</li>
    <li>Set page title, headers, keywords</li>
    <li>Create SEO JSON-LD headers</li>
    <li>Create social media Open-Graph headers</li>
    <li>Create favicons, apple-icons, android icons and more @hlp.Highlighted("(new!)")</li>
    <li>Add base-tags with the correct url @hlp.Highlighted("(new!)")</li>
  </ul>
  @hlp.TutorialLink("RazorBlade - using the Html5 Tag API", "blade800", 
    "The basics of creating html directly from code - new in 2.0 and enhanced in 2.1", 
    "enhanced!")
</ol>


<hr>
@hlp.TitleLogo("koi/assets/koi-tutorial-icon.png", "https://connect-koi.net/")
<h2>Koi Examples</h2>
<p>These examples help you do cool stuff, once you've mastered the basics above</p>
<ol>
  @hlp.TutorialLinkHome("Koi - Cool things with CSS-Frameworks and Classes", "koi", "Automatically include missing frameworks, conditionally modify the HTML or CSS-Classes and more, depending on what CSS-framework is used by the theme of this page.")
</ol>

<hr>
<h2>WebApi Examples</h2>
<p>These examples show how to create and use WebApi. This isn't Razor, but also uses C#. You'll often need this when creating JavaScript and SPA apps.</p>
<ol>
  @hlp.TutorialLinkHome("WebApi - Providing Data and more to JavaScript", "webapi", "Provide data to SPAs and do things like sending mails, changing data and more.", "(new!)")
</ol>

<hr>
<h2>Crazy 2sxc Advanced Examples</h2>
<p>These are really advanced examples and meant more to give guidance for specific questions. Don't worry if you don't understand these</p>
<ol>
  @hlp.TutorialLinkHome("2sxc Advanced Stuff", "2sa", "Really special crazy stuff", "(new!)")
</ol>


<hr>
<h2>Next Tutorials (Work-In-Progress</h2>
<p>We'll create some more tutorials in March/April 2019, incl. the following</p>
<ul>
  <li>Linking around in dnn</li>
  <li>Using js/css and image resources in the app folder</li>
  <li>Using app settings and resources</li>
  <li>Image Resizing on the server</li>
  <li>Navigation links</li>
  <li>Leveraging Connect.Koi</li>
  <li>Permission examples</li>
  <li>In-Page Editing experience</li>
  <li>Customizing Search Results</li>
  <li>Add multi-language examples</li>
  <li>work with icon-fonts, font-awesome etc.</li>
  <li>More data examples, working with users, SQL-write, PetaPoco etc.</li>
  <li>Working with DataSources in all kinds of ways</li>
  <li>Using data from other apps</li>
  <li>customizing search from data</li>
  <li>custom dynamic WebApi</li>
</ul>
