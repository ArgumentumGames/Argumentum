@inherits ToSic.Sxc.Dnn.RazorComponent
@using ToSic.Razor.Blade;
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;

@* Shows album title and introduction *@
@helper AlbumTitle(dynamic album) {
  <div class="ga-album-information" @Edit.TagToolbar(album)>
    @if (album.Presentation.HeadingType != "hidden") {
      @((Tag.Custom(album.Presentation.HeadingType)).Wrap(album.Title))
    } else if(Edit.Enabled) {
      <h2>(@App.Resources.TitleNotDisplayed)</h2>
    }
    <div class="ga-album-information-introduction">@Html.Raw(album.Introduction)</div>
  </div>
}

@* List the images in equal tiles or masonry style *@
@helper ImageList(dynamic album, bool masonry) {
  @* ImageResizer parameters depending on the style (equal or masonry) *@
  var imageResizerParams = "?w=560&scale=both&quality=80" + (masonry ? "&mode=max" : "&h=404&mode=crop");

  var images = AsAdam(album, "Images").Files as Dynlist;
  images = SortImagesAsNeeded(album.Presentation, images);

  <div class="ga-wrapper row auto-clear">
    @* Open masonry wrapper div if style is masonry *@
    @if (masonry) {
      @Tag.Div().Class("ga-masonry").TagStart
    }

      @foreach (var pic in images) {
        @* Open additional div if normal (not masonry) *@
        if (!masonry) {
          @Tag.Div().Class("ga-tiles col-6 col-sm-6 col-md-4 col-lg-3").TagStart
        }

          <div class="ga-image" @Edit.TagToolbar(toolbar: GetMetadataToolbar(pic.Metadata.EntityId, pic.FileId))>
            <figure>
              @(Tag.A()
                .Class("ga-fancybox")
                .Href(pic.Url + "w=1200&h=900&mode=max")
                .Attr("data-fancybox", "album-" + Dnn.Module.ModuleID)
                .TagStart)
                <div class="ga-img">
                  <div class="overlay"></div>
                  @Tag.Img().Class("lazy img-responsive").Src(pic.Url + imageResizerParams).Alt(pic.Metadata.Title)
                </div>
                @if(album.Presentation.ShowImageTitle && Text.Has(pic.Metadata.Title)) {
                  <figcaption>
                    <h6>@pic.Metadata.Title</h6>
                    <p>@pic.Metadata.Description</p>
                  </figcaption>
                }
              @Tag.A().TagEnd
            </figure>
          </div>

        @* Close additional div if normal (not masonry) *@
        if (!masonry) {
          @Tag.Div().TagEnd
        }
      }

    @* Close masonry wrapper div if style is masonry *@
    @if (masonry) {
      @Tag.Div().TagEnd
    }
  </div>
}

@* Displays album not found info *@
@helper AlbumNotFound() {
  // Tell browser & google that this page shouldn't be indexed
  // Also make sure DNN doesn't inject a default 404 page, which it would when an error code is set
  Response.StatusCode = 404;
  Response.TrySkipIisCustomErrors = true;
  <h1>@App.Resources.AlbumNotFound</h1>
  <div>@Html.Raw(App.Resources.AlbumNotFoundText)</div>
}

@* Shows "back to list" button *@
@helper BackButton() {
  <a href="@Dnn.Tab.FullUrl" class="btn btn-primary btn-sm">@App.Resources.BackToOverview</a>
}

@functions {
  /**
  * Returns the metadata-toolbar for an image
  * Will either offer to edit existing metadata, or create new metadata prefilled with the file ID
  */
  private object[] GetMetadataToolbar(int entityId, int fileId) {
    var metadataToolbar = new object[] {
      new {
        showCondition = true,
        command = new {
          action = "metadata",
          contentType = "ImageMetadata",
          entityId = entityId,
          metadata = new {
            key = "file:" + fileId
          }
        }
      }
    };

    return metadataToolbar;
  }

  /**
  * Returns the images, sorted by the passed setting
  */
  public dynamic SortImagesAsNeeded(dynamic settings, Dynlist images) {
    switch ((string)settings.SortMode) {
      case "File asc":
        images = images.OrderBy(c => c.FileName);
        break;
      case "File desc":
        images = images.OrderByDescending(c => c.FileName);
        break;
      case "Title asc":
        images = images.OrderBy(c => !c.HasMetadata).ThenBy(c => !c.HasMetadata ? "" : ((dynamic)c.Metadata).Title);
        break;
      case "Title desc":
        images = images.OrderBy(c => !c.HasMetadata).ThenByDescending(c => !c.HasMetadata ? "" : ((dynamic)c.Metadata).Title);
        break;
      case "Upload asc":
        images = images.OrderBy(c => c.Modified);
        break;
      case "Upload desc":
        images = images.OrderByDescending(c => c.Modified);
        break;
    }
    return images;
  }
}