@inherits ToSic.Sxc.Dnn.RazorComponent
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;
@using System;
@using ToSic.Razor.Blade;
<?xml version="1.0" encoding="utf-8"?>
@{
    // get all posts as delived from the standard query
    var episodes = (Content.Parents("Episode") as Dynlist).OrderByDescending(e => e.Date);

    // get protocol and host to complete the urls of the episodes and the one of the image
    var urlHostPath = Link.To().Substring(Link.To().IndexOf("//") + 2);
    var urlHost = urlHostPath.Substring(0, urlHostPath.IndexOf("/"));
    var urlProtocol = Link.To().Substring(0, Link.To().IndexOf("//") + 2);
    var websiteRoot = urlProtocol + urlHost;

    var imageUrl = websiteRoot + Content.Image;

    var copyrightYear = episodes.Last().Date.Year == episodes.First().Date.Year
      ? episodes.First().Date.Year
      : episodes.Last().Date.Year + "-" + episodes.First().Date.Year; // results in e.g. 2019 or 2017-2019

    var copyrightNotice = Content.License.Link != "copyright/"
      ? "Copyright © " + copyrightYear + " " + Content.Owner.FullName + " (" + Content.License.Link + ")"
      : "Copyright © " + copyrightYear + " " + Content.Owner.FullName;
}

@if(Request.QueryString["standalone"] == "true")
{
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule">
    <channel>
      @Tag.Custom("title", Content.Title)
      @Tag.Custom("link", Link.To())
      @Tag.Custom("image").TagStart
        @Tag.Custom("title", Content.Title)
        @Tag.Custom("url", imageUrl)
        @Tag.Custom("link", Link.To())
      @Tag.Custom("image").TagEnd
      @Tag.Custom("itunes:image").Attr("href", imageUrl + "?w=3000&h=3000") <!-- 3000 x 3000 is a apple requirement -->
      @Tag.Custom("description", Tags.Strip(Content.Description))
      @Tag.Custom("itunes:summary", Tags.Strip(Content.Description))
      @Tag.Custom("language", Content.Language)
      @Tag.Custom("copyright", copyrightNotice)
      @if(Content.License.Link != "copyright/") {
        @Tag.Custom("creativeCommons:license", Content.License.Link)
      }
      @Tag.Custom("managingEditor", Content.Owner.Email + " (" + Content.Owner.FullName + ")")
      @Tag.Custom("itunes:owner").TagStart
        @Tag.Custom("itunes:name", Content.Owner.FullName)
        @Tag.Custom("itunes:email", Content.Owner.Email)
      @Tag.Custom("itunes:owner").TagEnd
      @Tag.Custom("itunes:author", Content.Owner.FullName)

      @if(Text.Has(Content.Category.SubCategory)) {
        @Tag.Custom("itunes:category").Attr("text", Content.Category.MainCategory).TagStart
          @Tag.Custom("itunes:category").Attr("text", Content.Category.SubCategory)
        @Tag.Custom("itunes:category").TagEnd
      } else {
        @Tag.Custom("itunes:category").Attr("text", Content.Category.MainCategory)
      }
      @Tag.Custom("itunes:explicit", episodes.Any(e => e.Explicit == true) ? "yes" : "no")
      @(Tag.Custom("atom:link")
        .Attr("href", Link.To(parameters: "rss/true/channelid/" + Content.EntityId + "/standalone/true"))
        .Attr("rel", "self")
        .Attr("type", "application/rss+xml"))
      @Tag.Custom("generator", "2sxc PodCast App")
      @foreach(var episode in episodes) {
        var publicationDate = (episode.Date ?? DateTime.Now).ToString("R");
        var authorItems = episode.Author as Dynlist;
        var authorFullName = authorItems.Any() ? authorItems.First().FullName : "";
        var authorEmail = authorItems.Any() ? authorItems.First().Email : "";
        var duration = TimeSpan.FromMinutes(decimal.ToDouble(episode.Duration ?? 0)).ToString("hh\\:mm") + ":00";
        <item>
          @Tag.Custom("title", episode.Title)
          @Tag.Custom("itunes:subtitle", Text.Crop(Tags.Strip(episode.Description), 255))
          @Tag.Custom("description", Tags.Strip(episode.Description))
          @Tag.Custom("itunes:summary", Tags.Strip(episode.Description))
          @Tag.Custom("pubDate", publicationDate)
          @Tag.Custom("enclosure").Attr("url", websiteRoot + episode.Audio).Attr("type", "audio/mpeg").Attr("length", "1024")
          @Tag.Custom("guid", episode.EntityGuid.ToString()).Attr("isPermaLink", "false")
          @Tag.Custom("category", Text.Has(Content.Category.SubCategory) ? Content.Category.SubCategory : Content.Category.MainCategory)
          @Tag.Custom("author", authorEmail + " (" + authorFullName + ")")
          @Tag.Custom("itunes:author", authorFullName)
          @Tag.Custom("itunes:duration", duration)
          @Tag.Custom("itunes:explicit", episode.Explicit ? "yes" : "no")
          @Tag.Custom("link", Link.To())
        </item>
      }
    </channel>
  </rss>
} else {
  <span>you are seeing this because you are currently viewing a normal page. to use this feed correctly, you must add ?standalone=true to the url, so it doesn't show dnn stuff or html. note that you can put the feed on an own page and then link to it <a href="@Link.To(parameters: "standalone=true")" target="_blank">(with ?standalone=true)</a> or you can also auto-use it by using the normal blog-page and where you would usually see things like /tag/something replace with /feed/all?standalone=true
    @Edit.Toolbar(Content)
  </span>
}