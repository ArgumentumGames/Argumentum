@{
    var all = AsDynamic(Data["Links"]);
    var newKey = GenerateCode(App.Settings.GenerateKeyPrefix, (int)App.Settings.GenerateKeyLength, true);

    // path to qr-code generator
    var qrPath = "http://api.qrserver.com/v1/create-qr-code/?color={foreground}&bgcolor={background}&qzone=1&margin=0&size={dim}x{dim}&ecc={ecc}&data={link}"
        .Replace("{foreground}", App.Settings.QrForegroundColor.Replace("#", ""))
        .Replace("{background}", App.Settings.QrBackgroundColor.Replace("#", ""))
        .Replace("{dim}", App.Settings.QrDimension.ToString())
        .Replace("{ecc}", App.Settings.QrEcc);

    var rootPath = App.Settings.Protocol + App.Settings.ShortDomain + "/";
}
<div class="sc-element">
@Edit.Toolbar()
<table>
    <tr>
        <th>Key</th>
        <th>Group</th>
        <th>Title</th>
        <th>Target</th>
        <th>Retired</th>
        <th>Test link</th>
        <th>API</th>
        <th>QR</th>
    </tr>

    @foreach(var link in all) {
        var full = rootPath + link.Key;
        var qr = qrPath.Replace("{link}", full);
        <tr>
            <td>
                <a href="javascript:;" onclick="$2sxc(this).manage.run('edit', {entityId: @link.EntityId})">
                    @link.Key
                </a>
            </td>
            <td>
                @{
                    var cat = ((IEnumerable<dynamic>)link.Group).FirstOrDefault();
                    var catTitle = cat != null ? cat.Title : "";
                }
                @catTitle
            </td>
            <td>@link.Title</td>
            <td>
                <a href="@link.Link" target='_blank'>
                    @link.Link
                </a>
            </td>
            <td>@link.Retired</td>
            <td>
                <a href="@full" target="_blank">
                    @App.Settings.ShortDomain/@link.Key
                </a>
            </td>
            <td>
                <a href="@TestLink(link.Key)" target="_blank">api</a>
            </td>
            <td>
                <a href="@qr" target="_blank">QR</a>
            </td>
        </tr>
    }
</table>
</div>
<div>
@Edit.Toolbar(actions: "new", contentType: "Link", prefill: new { Key = newKey }) for @newKey
</div>


<p>
    <br><br>
    <em>
        Setup note: make sure you have configured the web.config - instructions <a href="@Link.To(parameters: "webconfig=true")">here</a>
    </em>
</p>
@functions {
    // try to generate a good web-api test-link

    public string TestLink(string key){
        return "/shortlinks/desktopmodules/2sxc/api/app/ShortLinks/api/Redirect/Go?key=" + key;
    }

}

@functions {
    // this is the block in charge of creating unique, new url-keys which are not yet in use

    int maxTries = 100; // only try this 100x to not crash
    public string GenerateCode(string prefix, int length, bool lowerOnly) {
        var realLength = length - prefix.Length;
        var existingKeys = AsDynamic(Data["Links"])
            .Select(l => l.Key)
            .Distinct()
            .ToDictionary(k => k, null);
        
        for(var attempt = 0; attempt < maxTries; attempt++) {
            var newKey = prefix + RandomString(realLength, lowerOnly);
            if(!existingKeys.ContainsKey(newKey))
                return newKey;
        }

        throw new Exception("tried too many attempts, didn't find a code, will abort'");
    }

    // funky, trivial randomizer
    // got basic idea from http://stackoverflow.com/questions/1344221/how-can-i-generate-random-alphanumeric-strings-in-c
    private static Random random = new Random();

    public static string RandomString(int length, bool lowerOnly)
    {
        const string chars = "abcdefghijklmnopqrstuvwxyz0123456789";
        const string withUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + chars;
        
        return new string(Enumerable.Repeat(lowerOnly ? chars : withUpper, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
}