@inherits ToSic.Sxc.Dnn.RazorComponent
@using System.Dynamic;
@using System.IO;
@using ToSic.Razor.Blade;

@functions {
  public class MapInfo
  {
    public double GpsLong;
    public double GpsLat;
    public string DirectionUrl;
  }

  // check a link, prepare target window, icon etc. based on various settings
	public MapInfo MapInfos(dynamic content) {
    // this will contain the result
    var mInfo = new MapInfo();

    // Language is used for the map-link
    var language = Dnn.Portal.CultureCode.Split(new[] { '-' })[0];

    // GPS is a JSON field, so we must use AsDynamic to access the properties
    var gps = AsDynamic(content.GPS);
    var gpsLong = gps.Longitude ?? 0; // use 0 if not defined
    var gpsLat = gps.Latitude ?? 0;	  // use 0 if not defined

    // this link will be used to open the Google-Directions in a new window
    var directionurl = gpsLong > 0
      // if we have coordinates, use them
      ? "https://www.google.com/maps/dir/" + gpsLat + "," + gpsLong
      // otherwise use the address
      : "https://maps.google.com/maps?daddr="
        + (content.Street + " " + content.ZipCode + " " + content.City + " " + content.Country)
          .Replace(" ", "+")
        + "&amp;saddr=&amp;f=d&amp;hl=" + language + "&amp;ie=UTF8&amp;z=16";

    // add properties
    mInfo.GpsLong = gpsLong;
    mInfo.GpsLat = gpsLat;
    mInfo.DirectionUrl = directionurl;

    return mInfo;
	}
}
@helper AddGoogleMapsKey() {
  // get key from settings and remove empty lines
  // will also add warning! in front, if the settings say to include a warning
  var warning = (App.Settings.GoogleMapsShowWarning ? "warning!" : "");
  var key = warning + App.Settings.GoogleMapsKey.Replace("\n", "");
  <script>
    var googleMapsApiKey = "@key";
  </script>
}