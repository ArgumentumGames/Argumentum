{"version":3,"sources":["webpack://./shared/styles/_style.scss","webpack://./bs5/styles/_variables.scss","webpack://./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAOE,6BACE,oBCNY,CDOZ,eAAA,CAGF,6DAEE,sBAAA,CAEF,iCACE,WAAA,CAOF,uCACE,sBAAA,CAGF,oDACE,sCAAA,CACA,0DACE,+BAAA,CAGF,+EACE,yCAAA,CACA,6BAAA,CACA,yBAAA,CEuBF,wBF1BA,+EAMI,6BAAA,CACA,0BAAA,CAAA,CAGF,wKAEE,oBAAA,CACA,yBAAA,CEaJ,wBFhBE,wKAMI,wBAAA,CAIJ,iFAEI,wBAAA,CACA,0BAAA,CAPA,CAUF,mGACE,uBAAA,CEDN,wBAAA,mGFIQ,oBAAA,CADA,iBACA,CAQR,yCAIE,wBAAA,CACA,+BAAA,CAHA,wBAAA,CADA,qBAAA,CAEA,0BAEA,CAbM","file":"styles.min.css","sourcesContent":["//\r\n// This SCSS generates the css for the general styles\r\n//\r\n// It is used by all CSS generators (Bootstrap3/4, etc.)\r\n// To keep things simple, it uses the standard variables of\r\n// bootstrap 4 conventions.\r\n.app-add-search3 {\r\n  input:focus {\r\n    border-color: $primary;\r\n    box-shadow: none;\r\n  }\r\n\r\n  button:focus,\r\n  button:active {\r\n    outline: none !important;\r\n  }\r\n  &.input-group svg {\r\n    height: 16px;\r\n  }\r\n}\r\n\r\n\r\n/*Styling Search Results*/\r\n#addsearch-results {\r\n  #addsearch-logo-img {\r\n    display: none!important;\r\n  }\r\n\r\n  .addsearch-result-item-container {\r\n    transition: background-color .3s linear;\r\n    &:hover {\r\n      background-color: #eee!important;\r\n    }\r\n\r\n    .addsearch-result-item-sub {\r\n      border-bottom: 1px solid rgb(236, 236, 236)!important;\r\n      padding-bottom: 10px!important;\r\n      padding-top: 5px!important;\r\n\r\n      @include media-breakpoint-up(md) {\r\n        padding-bottom: 20px!important;\r\n        padding-top: 10px!important;\r\n      }\r\n\r\n      h1 a,\r\n      h2 a {\r\n        color: #333!important;\r\n        font-weight: normal!important;\r\n\r\n        @include media-breakpoint-up(md) {\r\n          font-size: 20px!important;\r\n        }\r\n      }\r\n\r\n      p {\r\n        @include media-breakpoint-up(md) {\r\n          font-size: 16px!important;\r\n          line-height: 20px!important;\r\n        }\r\n\r\n        span.document_url {\r\n          color: $primary!important;\r\n          @include media-breakpoint-up(md) {\r\n            font-style: normal;\r\n            word-wrap: break-word;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @include media-breakpoint-up(md) {\r\n    #addsearch-fuzzy span {\r\n      height: 20px!important;\r\n      font-size: 14px!important;\r\n      line-height: 14px!important;\r\n      background-color: #f7f7f7;\r\n      border-bottom: 2px solid #ececec;\r\n    }\r\n  }\r\n}","$font-size-base: 1rem !default;\r\n\r\n$primary:       #0060AC !default;\r\n$secondary:     #001D38 !default;\r\n\r\n$body-bg:       #efefef !default;\r\n$body-color:    #222222 !default;\r\n\r\n$grid-gutter-width: 30px !default;","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}