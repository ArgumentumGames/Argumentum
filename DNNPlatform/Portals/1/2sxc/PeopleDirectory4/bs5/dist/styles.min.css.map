{"version":3,"sources":["webpack://./bs5/styles/bs5.scss","webpack://./bs5/styles/_style.scss","webpack://./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAWA;;;;CAAA,CCRM,2CACE,cAAA,CAGF,sDACE,mBAAA,CAON,yCACE,eAAA,CAGF,+CACE,mBAAA,CCqDA,2BDtDF,+CAMI,YAAA,CAFA,gBAAA,CACA,WACA,CAAA,CAQN,OAIE,4BAAA,CACA,oBAAA,CAFA,kBAAA,CADA,sBAAA,CADA,iBAIA,CAGF,YAEE,wBAAA,CACA,oBAAA,CAFA,aAEA","file":"styles.min.css","sourcesContent":["// ** Information in case you're new to this**\r\n// This is an SCSS file. \r\n// It generates the css file using Bootstrap4 standards.\r\n// To regenerate the SCSS using your variables (custom colors, etc.)\r\n// you can update the reference to your _variables.scss of your skin\r\n// please read the readme.md in this folder.\r\n\r\n\r\n// ** Add header-comments to the final file **\r\n// The following comment will be included in the final CSS\r\n// which helps users understand where it comes from\r\n/*!\r\n * This file was auto-generated using SASS\r\n * You can manually modify it - but usually you will want to \r\n * Re-generate it using the SASS variables of your theme\r\n*/\r\n\r\n// Include needed functions and mixins from Bootstrap 4\r\n@import \"../../node_modules/bootstrap/scss/_functions\";\r\n\r\n// Include needed variables and mixins from Bootstrap 4\r\n// You must adapt these paths to match your Bootstrap 4 skin\r\n// @import \"../../../_default/Skins/Bootstrap 4 Instant/src/scss/_variables.scss\";\r\n// @import \"_variables.scss\";\r\n@import \"../../node_modules/bootstrap/scss/mixins/_breakpoints.scss\";\r\n@import \"../../node_modules/bootstrap/scss/variables\";\r\n\r\n// Now parse the PeopleDirectory CSS Rules\r\n@import \"_style.scss\";","ï»¿.app-peopledirectory4-wrapper {\r\n  a {\r\n    &.card {\r\n      &:hover {\r\n        cursor: pointer;\r\n      }\r\n\r\n      .img-placeholder {\r\n        padding-bottom: 100%;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.app-peopledirectory4-details {\r\n  .emp-image {\r\n    min-width: 140px;\r\n  }\r\n\r\n  .img-placeholder {\r\n    padding-bottom: 100%;\r\n\r\n    @include media-breakpoint-down(sm) {\r\n      padding-bottom: 0;\r\n      width: 200px;\r\n      height: 200px;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// fix for bs3 alert styling\r\n\r\n.alert {\r\n  position: relative;\r\n  padding: .75rem 1.25rem;\r\n  margin-bottom: 1rem;\r\n  border: 1px solid transparent;\r\n  border-radius: .25rem;\r\n}\r\n\r\n.alert-dark {\r\n  color: #1b1e21;\r\n  background-color: #d6d8d9;\r\n  border-color: #c6c8ca;\r\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}