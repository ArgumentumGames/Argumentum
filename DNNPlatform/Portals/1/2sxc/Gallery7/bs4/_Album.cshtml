@inherits Custom.Hybrid.Razor12
@using ToSic.Razor.Blade;
@{
  /* 1. Pre-Checks: Determine which Album to show or show error
   * This will check if the url specifies a specific album, and if yes, use that
   * If not, use the one configured in the module (for single-album scenarios)
   * If nothing is found, it will stop after this code block (see `return` below)
   */

  // Get the PageServices for setting Titles and HTTP error headers
  var page = GetService<ToSic.Sxc.Web.IPageService>();

  // Get page Parameters (works on Dnn & Oqtane)
  var albumInUrl = CmsContext.Page.Parameters["Album"];
  var isDetailViewOfAlbum = Text.Has(albumInUrl);

  // define dom attribute for fancybox
  var fancyboxAttribute = "app-gallery7-fancybox-" + CmsContext.Module.Id; 
  
  // If album QueryString is specified, take album from QueryString, else take "current" album of the module
  var album = isDetailViewOfAlbum 
    ? AsList(Data).FirstOrDefault(a => a.Path == albumInUrl) 
    : Content;
  
  // If no album found, show error and stop processing
  if (album == null) {
    <h1>@Resources.AlbumNotFound</h1>
    <div>@Html.Raw(Resources.AlbumNotFoundText)</div>
    <a href="@Link.To()" class="btn btn-outline-primary btn-sm">@Resources.BackToOverview</a>

    page.SetHttpStatus(404);
    return;
  }
}
@{
  /* 2. Pre-Checks: Determine which Album to show or show error
   * This will check if the url specifies a specific album, and if yes, use that
   * If not, use the one configured in the module (for single-album scenarios)
   * If nothing is found, it will stop after this code block (see `return` below)
   */

  // 2.1 Set the title of the page
  page.SetTitle(album.Title + " | ");       // will prepend to the existing title
  // page.SetTitle(album.Title, "[album]"); // Alternative: this would replace a placeholder [album] in the title with the title

  // 2.2 Determine if we should show as Masonry
  var albumTiling = Text.Has(album.Presentation.TileStructure)
    ? album.Presentation.TileStructure
    : CmsContext.View.Identifier;
  var useMasonry = albumTiling == "masonry";

  // visual effect for mouse interaction
  var effect = "effect-zoom"; // alternative: "effect-darken"; 

  // 2.3 Determine the widths of each part, based on 12 Bootstrap Cols; 
  var imgResizeFactor = useMasonry ? "4:12" : "3:12";
  var thumbHeight = useMasonry ? (int?)0 : null; // if Masonry it must be 0 (no height), otherwise null = default

  // 2.4 Prepare the url resize-params for re-use with the Link.Image helper and global Image Settings http://r.2sxc.org/settings
  var thumbnailParams = Link.Image("", Settings.Images.Content, factor: imgResizeFactor, height: thumbHeight);
  var lightboxParams = Link.Image("", Settings.Images.Lightbox);

  // 2.5 Other stuff like class to use on the container-div etc.
  var classForMainDiv = useMasonry ? "app-ga7-masonry" : "row mb-4";

  // 2.9 Helpers used later in the Template
  var helpers = CreateInstance("SortImages.cs");        // Has helper code for sorting
}
@* 4. Show the Album *@
<div class="app-ga7-main" @Edit.TagToolbar(album)>
  @* Display Album Title or information that title is hidden *@
  @Html.Partial("_Album.Part-Title-Description.cshtml", new { album = album })

  @* 4.1 Display the images *@
  <div class="@classForMainDiv">

    @foreach (var pic in helpers.GetImagesSorted(album)) {
      @* 4.2 Prepare caption, tooltip, toolbar etc. for showing the image afterwards *@

      // Get image title from metadata
      var picTitle = pic.Metadata.Title;

      // Build the Caption for the Lightbox - will later be converted to an attribute
      var caption = (Content.Presentation.ShowImageTitle && Text.Has(pic.Metadata.Title))
        ? Tag.H6().Wrap(Tags.Strip(pic.Metadata.Title)) + Tag.P().Wrap(Tags.Strip(pic.Metadata.Description))
        : "";

      // Toolbar parameters (for admins) to ensure the metadata-button does what's needed
      var metaToolbarConfig = new [] {
          "toolbar=empty",
          "metadata?entityId=" + pic.Metadata.EntityId + "&contentType=ImageMetadata&for=file:" + pic.FileId
      };

      @* 4.3a Optionally wrap inside a special <div> if it's not Masonry-layout *@
      if(!useMasonry) { @Tag.Div().Class("col-12 col-sm-6 col-md-4 col-lg-3 mb-4").TagStart }
        @* 4.4 Now show each image *@
        <a class="app-ga7" @fancyboxAttribute href='@Link.Image(pic.Url + lightboxParams)' @Tag.Attr("data-caption", caption)>
          <figure class="app-ga7-image @effect" @Edit.TagToolbar(toolbar: metaToolbarConfig, condition: !Content.IsDemoItem)>
            @* 4.5 Show the Overlay, an optional title (based on settings) and the image itself *@
            <figcaption class="overlay d-flex align-items-end">
              @if(Text.Has(picTitle)) { <div class="caption">@picTitle</div> }
            </figcaption>
            <img loading="lazy" class="img-fluid" src='@Link.Image(pic.Url + thumbnailParams)' alt="@picTitle" />
          </figure>
        </a>
      @* 4.3b close <div> if we opened it above *@
      if(!useMasonry) { @Tag.Div().TagEnd }
    }
  </div>
</div>

@* 5. Show back button if the view is used as detail view *@
@if(isDetailViewOfAlbum) {
  <a href="@Link.To()" class="btn btn-outline-primary btn-sm">@Resources.BackToOverview</a>
}

@* 9. Hide the side navigation if the view is used as detail view - this only works if the skin uses the same class *@
@if (isDetailViewOfAlbum) {
  <style>.ly-col-leftpane { display: none; }</style>
}

@Html.Partial("shared/_Assets.cshtml", new { Scripts = true, FancyboxAttribute = fancyboxAttribute })