@inherits Custom.Hybrid.Razor12
@using ToSic.Razor.Blade;
@using ToSic.Sxc.Services;

@{
  // get some helper functions for later on
  var helpers = CreateInstance("DetailsHelpers.cs");
  
  var eventData = AsList(Data["Event"]).FirstOrDefault();
  var hasEventDate = AsList(Data["Current"]).FirstOrDefault() != null;
  // Generate a dynamic object that always works, no matter if there is a Current date or not
  var eventDate =  AsList(Data["Current"]).FirstOrDefault() ?? AsDynamic("");

  var page = GetService<IPageService>();  // Service to set titles etc. on the page
  var render = GetService<IRenderService>();

  // Check if this event exists - if not, 404 not-found
  if(eventDate == null && eventData == null) {
    <h1>@Resources.LabelEventNotExists</h1>
    <p>@Resources.LabelEventNotExistsText</p>

    @helpers.BackToListButton();
    page.SetHttpStatus(404);
    return ;
  }

  var item = hasEventDate ? eventDate.Event : eventData;
  var registrations = AsList(Data["Registrations"]);
  var freeSeats = (eventDate == null ? 0 : eventDate.Seats) - registrations.Count();

  if(hasEventDate) {
    var titleEventDateEnd = (!eventDate.EndDateIsStartDate) ? " - " + eventDate.End.ToString("d") : " | ";
    page.SetTitle(item.Title + " | " + eventDate.Start.ToString("d") + titleEventDateEnd);
  } else {
    page.SetTitle(item.Title + " | ");
  }
}

<div class="app-events6 app-events6-detail" @Edit.TagToolbar(item, toolbar: "-new")>
  <div class="app-events6-detail-content mb-4">
    <h1 class="m-0">@helpers.Title(item, eventDate)</h1>

    <div class="event-meta">
      @if(hasEventDate) {
        <span class="app-events6-date">@eventDate.Start.ToString("d") @(!eventDate.EndDateIsStartDate ? " - " + eventDate.End.ToString("d") : "" ) | </span>
      }
      <span class="app-events6-categories">@item.Category.Title</span>
    </div>

  </div>

  <div class="app-events6-detail-content">
    <div class="row">
      <div class='col-12 @(Text.Has(item.Image) ? "col-md-8" : "") order-1 order-md-0'>
        <h2 class="h5">@item.ShortDescription</h2>
        <div class="app-events6-detail-body mb-4">
          @render.All(item, field: "BodyContentBlocks", merge: item.Description)          
        </div>

        @Html.Partial("_Details.PartDates.cshtml", new { Item = item, HasEventDate = hasEventDate, EventDate = eventDate })

        <div class="app-events6-detail-infos row mb-4">
          @* Event Location *@
          @helpers.DetailsBox(Resources.Location, Text.First(eventDate.Location, item.Location))

          @* Event Leader *@
          @helpers.DetailsBox(Resources.Management, Text.First(eventDate.Person, item.Person))

          @* Event Fee *@
          @helpers.DetailsBox(Resources.Fee, Text.First(eventDate.Fee, item.Fee))

          @* Event Registration / Seat Info *@
          @if(hasEventDate && eventDate.RegistrationEnabled && eventDate.IsFullyBooked == false && eventDate.IsCancelled == false && eventDate.Seats != null) {
            @helpers.DetailsBox(Resources.Seats, freeSeats.ToString())
          }

          @* Event Time *@
          @helpers.DetailsBox(Resources.DateTime, eventDate.TimeSpecifics)

          @* Event more detail file/link *@
          @{
            var moreDetailsLink = ""; //Text.First(eventDate.Document, item.Document);
          }
          @if(Text.Has(moreDetailsLink)) {
            var fileName = System.IO.Path.GetFileName(moreDetailsLink);
            <div class="col-12 col-md-6 mb-3 app-events6-infocontainer">
              <h6>@Resources.DetailsLink</h6>
              <a href="@moreDetailsLink" target="_blank">@(Text.Has(fileName) ? fileName : moreDetailsLink)</a>
            </div>
          }
        </div>

        @* Event Status (Registration, Canceled, Overbooked) *@
        @{
          var addBackButton = true;
        }
        @if (hasEventDate && eventDate.IsCancelled == true) {
          <div class="alert alert-warning">
            @Resources.StatusCanceled
          </div>
        } else if(Settings.RegistrationEnabled && hasEventDate && eventDate.RegistrationEnabled) {
          if(freeSeats <= 0 || eventDate.IsFullyBooked) { // Turn 1 back to freeSeats after fix
            <div class="alert alert-warning">
              @Resources.StatusFullyBooked
            </div>
          } else {
            var reqisterParams = "mid=" + CmsContext.Module.Id + "&courseId=" + item.EntityId + "&dateId=" + eventDate.EntityId + "&" + item.UrlKey;
            addBackButton = false;  // disable this, as we'll add now so it's before the register button
            @helpers.BackToListButton()
            <a class="btn btn-md btn-primary" href="@Link.To(parameters: reqisterParams)">@Html.Raw(Resources.ButtonRegister)</a>
          }
        }
        @if (addBackButton) {
          @helpers.BackToListButton()
        }
      </div>

      @if (Text.Has(item.Image)) {
        <div class="col-12 col-md-4 mb-4 mb-md-0">
          <img loading="lazy" class="img-fluid d-block m-auto" src='@Link.Image(item.Image, Settings.Images.Content, factor: "1/3")' alt="@item.Title" />
        </div>
      }
    </div>
  </div>
</div>

@Html.Partial("shared/_Assets.cshtml") 