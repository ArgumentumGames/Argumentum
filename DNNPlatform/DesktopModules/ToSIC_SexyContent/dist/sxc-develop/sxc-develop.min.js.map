{"version":3,"sources":["sxc-develop.min.js"],"names":["angular","module","config","$translatePartialLoaderProvider","addPart","component","templateUrl","controller","appAssetsSvc","appId","vm","extend","this","show","svc","toggle","assets","liveList","editFile","filename","window","open","assembleUrl","newFileName","url","location","href","newItems","JSON","stringify","Path","replace","RegExp","encodeURI","addFile","result","prompt","create","controllerAs","bindings","fileName","type","EditorController","sourceSvc","snippetSvc","sxcDialogs","items","$uibModalInstance","$window","$scope","$translate","saveToastr","ctrlS","debugState","activate","save","item","refresh","debug","undefined","EntityId","view","tempCodeBecauseOfBug","editor","get","then","data","initSnippets","template","snipSvc","ace","getSnippets","snippets","registerSnippets","close","confirm","instant","$on","e","preventDefault","addEventListener","unsavedChangesText","event","returnValue","autoClose","after","latestCode","getValue","savePackage","copy","Code","registerInEditor","aceLoaded","_editor","$inject","links","snippetSet","addSnippet","snippet","snippetManager","require","insertSnippet","focus","$onInit","console","log","$onChanges","factory","$http","eavConfig","svcCreator","contentTypeFieldSvc","$q","InputTypeSnippetHandler","itsh","inputTypeSnippets","extractInputTypeSnippets","list","standardArray","inputTypeArray","i","length","itm","systemSnippet","set","substr","push","catalogInputTypeSnippets","inputTypeList","subset","attachSnippets","target","prefix","fieldname","inputType","snipDefaults","genericSnippet","indexOf","fieldType","typeSnips","concat","more","fieldSnips","g","name","key","label","snip","localizeGenericSnippet","content","collapse","objName","fieldName","templateConfiguration","cachedSnippets","inputTypes","loaded","tree","resolve","reject","loadTable","relevant","filterAwayNotNeededSnippetsList","sets","initSnippetsWithConfig","x","makeTree","Content","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","o","reformatted","help","linksList","linksString","llist","split","pair","trim","getHelpKey","addition","newList","setHasPrefix","keyPrefixes","keyPrefixIndex","Type","AppId","StaticName","getFields","forEach","value","valuePlaceholder","Metadata","merged","Notes","toLowerCase","InputType","std","obj","val","register","params","isNaN","path","templateId","Extension","post","filter","addKey","isObject","Object","keys","map","defineProperty","enumerable","$key","$value","run","$templateCache","put"],"mappings":"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","file":"sxc-develop.min.js","sourcesContent":["(function () {\r\n\r\n    angular.module(\"SourceEditor\", [\r\n            \"EavConfiguration\",\r\n            \"EavServices\",\r\n            \"SxcServices\",\r\n            \"SxcTemplates\",\r\n            \"pascalprecht.translate\",\r\n            \"ui.ace\"\r\n        ])\r\n        /*@ngInject*/\r\n        .config([\"$translatePartialLoaderProvider\", function ($translatePartialLoaderProvider) {\r\n            // ensure the language pack is loaded\r\n            $translatePartialLoaderProvider.addPart(\"source-editor-snippets\");\r\n        }]);\r\n\r\n} ());\n\r\n\r\nangular.module('SourceEditor').component('devFiles', {\r\n    templateUrl: 'source-editor/dev-files.html',\r\n    /*@ngInject*/\r\n    controller: [\"appAssetsSvc\", \"appId\", function (appAssetsSvc, appId) {\r\n        var vm = angular.extend(this, {\r\n            show: false,\r\n            svc: appAssetsSvc(appId),\r\n\r\n            toggle: function() {\r\n                vm.show = !vm.show;\r\n                if (!vm.assets)\r\n                    vm.assets = vm.svc.liveList();\r\n            },\r\n\r\n            editFile: function(filename) {\r\n                window.open(vm.assembleUrl(filename));\r\n                vm.toggle();\r\n            },\r\n\r\n            assembleUrl: function(newFileName) {\r\n                // note that as of now, we'll just use the initial url and change the path\r\n                // then open a new window\r\n                var url = window.location.href;\r\n                var newItems = JSON.stringify([{ Path: newFileName }]);\r\n                return url.replace(new RegExp(\"items=.*?%5d\", \"i\"), \"items=\" + encodeURI(newItems)); // note: sometimes it doesn't have an appid, so it's [0-9]* instead of [0-9]+\r\n            },\r\n\r\n            addFile: function() {\r\n                // todo: i18n\r\n                var result = prompt(\"please enter full file name\"); // $translate.instant(\"AppManagement.Prompt.NewApp\"));\r\n                if (result)\r\n                    vm.svc.create(result);\r\n\r\n            }\r\n        });\r\n\r\n    }],\r\n    controllerAs: \"vm\",\r\n    bindings: {\r\n        fileName: \"<\",\r\n        type: \"<\"\r\n    }\r\n});\n(function () {\r\n\r\nEditorController.$inject = [\"sourceSvc\", \"snippetSvc\", \"appAssetsSvc\", \"appId\", \"sxcDialogs\", \"items\", \"$uibModalInstance\", \"$window\", \"$scope\", \"$translate\", \"saveToastr\", \"ctrlS\", \"debugState\"];\r\nangular.module(\"SourceEditor\").component(\"editor\", {\r\n    templateUrl: \"source-editor/editor.html\",\r\n    controller: EditorController,\r\n    controllerAs: \"vm\"\r\n});\r\n\r\n/*@ngInject*/\r\nfunction EditorController(sourceSvc, snippetSvc, appAssetsSvc, appId, sxcDialogs, items, $uibModalInstance, $window, $scope, $translate, saveToastr, ctrlS, debugState) {\r\n    // todo: must re-think this, nicer would be if it's a proper parameter\r\n    var item = items[0];\r\n\r\n    $translate.refresh();   // necessary to load stuff added in this lazy-loaded app\r\n\r\n    var vm = this;\r\n    vm.debug = debugState;\r\n\r\n    // if item is an object with EntityId, it referrs to a template, otherwise it's a relative path\r\n\r\n    var svc = sourceSvc(item.EntityId !== undefined ? item.EntityId : item.Path);\r\n\r\n    vm.view = {};\r\n    vm.tempCodeBecauseOfBug = \"\";\r\n    vm.editor = null;\r\n\r\n    svc.get().then(function (result) {\r\n        vm.view = result.data;\r\n        svc.initSnippets(vm.view);\r\n    });\r\n\r\n    // load appropriate snippets from the snippet service\r\n    svc.initSnippets = function (template) {\r\n        vm.snipSvc = snippetSvc(template, ace);\r\n        vm.snipSvc.getSnippets().then(function (result) {\r\n            vm.snippets = result;   // prep for binding to the snippet-selector\r\n\r\n            // now register the snippets in the editor\r\n            vm.registerSnippets();\r\n        });\r\n    };\r\n\r\n    //#region close / prevent-close\r\n    vm.close = function () {\r\n        if (!confirm($translate.instant(\"Message.ExitOk\")))\r\n            return;\r\n        window.close();\r\n    };\r\n\r\n    // prevent all kind of closing when accidentally just clicking on the side of the dialog\r\n    $scope.$on(\"modal.closing\", function (e) { e.preventDefault(); });\r\n\r\n    $window.addEventListener(\"beforeunload\", function (e) {\r\n        var unsavedChangesText = $translate.instant(\"Message.ExitOk\");\r\n        (e || window.event).returnValue = unsavedChangesText; //Gecko + IE\r\n        return unsavedChangesText; //Gecko + Webkit, Safari, Chrome etc.\r\n    });\r\n\r\n    //#endregion\r\n\r\n    //#region save\r\n    vm.save = function (autoClose) {\r\n        var after = autoClose ? vm.close : function () { };\r\n\r\n        //#region bugfix 607\r\n        // check if there is still some temp-snippet which we must update first \r\n        // - because of issue https://github.com/2sic/2sxc/issues/607\r\n        // it's very important that we place the text into a copy of the variable\r\n        // and NOT in the view.Code, otherwise undo will stop working\r\n        var latestCode = vm.editor.getValue();\r\n        var savePackage = angular.copy(vm.view);\r\n        if (savePackage.Code !== latestCode) //{\r\n            savePackage.Code = latestCode;\r\n        //#endregion\r\n\r\n        // now save with appropriate toaster\r\n        saveToastr(svc.save(savePackage)).then(after);\r\n    };\r\n    //#endregion\r\n\r\n    activate();\r\n\r\n    function activate() {\r\n        // add ctrl+s to save\r\n        ctrlS(function () { vm.save(false); });\r\n\r\n\r\n    }\r\n\r\n    //#region snippets\r\n    vm.registerSnippets = function registerSnippets() {\r\n        // ensure we have everything first (this may be called multiple times), then register them\r\n        if (!(vm.snipSvc && vm.editor))\r\n            return;\r\n        vm.snipSvc.registerInEditor();\r\n    };\r\n    //#endregion\r\n\r\n    // this event is called when the editor is ready\r\n    vm.aceLoaded = function (_editor) {\r\n        vm.editor = _editor;        // remember the editor for later actions\r\n        vm.registerSnippets();      // try to register the snippets\r\n    };\r\n\r\n}\r\n\r\n\r\n}());\n\r\n\r\nangular.module('SourceEditor').component('snippetsLinks', {\r\n    templateUrl: 'source-editor/snippets-links.html',\r\n    /*@ngInject*/\r\n    controller: function () {\r\n        //var vm = this;\r\n    },\r\n    controllerAs: \"vm\",\r\n    bindings: {\r\n        links: \"<\"\r\n    }\r\n});\n\r\n\r\nangular.module('SourceEditor').component('snippets', {\r\n    templateUrl: 'source-editor/snippets.html',\r\n    /*@ngInject*/\r\n    controller: function () {\r\n        var vm = this;\r\n\r\n        // default set\r\n        vm.snippetSet = \"Content\";\r\n\r\n        vm.addSnippet = function addSnippet(snippet) {\r\n            var snippetManager = ace.require(\"ace/snippets\").snippetManager;\r\n            snippetManager.insertSnippet(vm.editor, snippet);\r\n            vm.editor.focus();\r\n        };\r\n\r\n        vm.$onInit = function () {\r\n            console.log(\"component snip loading\");\r\n            console.log(\"def set\" + vm.snippetSet);\r\n        };\r\n\r\n        vm.$onChanges = function() {\r\n            console.log(\"def set\" + vm.snippetSet);\r\n        };\r\n\r\n    },\r\n    controllerAs: \"vm\",\r\n    bindings: {\r\n        snippets: \"<\",\r\n        editor: \"<\"\r\n    }\r\n});\n// This service delivers all snippets, translated etc. to the sourc-editor UI\r\nangular.module(\"SourceEditor\")\r\n    /*@ngInject*/\r\n    .factory(\"snippetSvc\", [\"$http\", \"eavConfig\", \"svcCreator\", \"$translate\", \"contentTypeFieldSvc\", \"$q\", function ($http, eavConfig, svcCreator, $translate, contentTypeFieldSvc, $q) {\r\n\r\n        // Construct a service for this specific appId\r\n        return function createSvc(templateConfiguration, ace) {\r\n\r\n            var svc = {\r\n                cachedSnippets: {},\r\n                //inputTypeSnippets: {},\r\n                inputTypes: InputTypeSnippetHandler(),\r\n                loaded: false,\r\n                list: [], // snippets as list in a format for the editor\r\n                tree: null, // snippets as tree for the drop-down tool\r\n                ace: ace, // source editor object\r\n\r\n\r\n                // #region load jsons and prepare for binding as tree and for the editor\r\n                /// Main function, loads all snippets, translates\r\n                /// returns the object tree as a promise\r\n                getSnippets: function() {\r\n                    if (svc.loaded)\r\n                        return $q(function(resolve, reject) { resolve(svc.cachedSnippets); });\r\n\r\n                    return svc.loadTable().then(function(result) {\r\n                        // filter for token/razor snippets\r\n                        var relevant = svc.filterAwayNotNeededSnippetsList(result.data.snippets);\r\n                        svc.inputTypes.extractInputTypeSnippets(relevant, svc.list);\r\n\r\n                        var sets = svc.initSnippetsWithConfig(svc.list);\r\n                        for (var x in sets)\r\n                            svc.cachedSnippets[x] = sets[x];\r\n                        svc.loaded = true;\r\n                        return (svc.cachedSnippets);\r\n                    });\r\n                },\r\n\r\n                initSnippetsWithConfig: function(sets) {\r\n                    sets = svc.tree = svc.makeTree(sets);\r\n\r\n                    //#region Retrieve all relevant content-types and infos\r\n                    sets.Content = angular.extend({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n                    if (templateConfiguration.TypeContent)\r\n                        svc.loadContentType(sets.Content.Fields, templateConfiguration.TypeContent, \"Content\");\r\n                    if (templateConfiguration.TypeContentPresentation)\r\n                        svc.loadContentType(sets.Content.PresentationFields, templateConfiguration.TypeContentPresentation, \"Content.Presentation\");\r\n\r\n                    if (templateConfiguration.HasList) {\r\n                        sets.List = angular.extend({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n                        if (templateConfiguration.TypeList)\r\n                            svc.loadContentType(sets.List.Fields, templateConfiguration.TypeList, \"ListContent\");\r\n                        if (templateConfiguration.TypeListPresentation)\r\n                            svc.loadContentType(sets.List.PresentationFields, templateConfiguration.TypeListPresentation, \"ListContent.Presentation\");\r\n                    } else \r\n                        delete sets.List;\r\n\r\n                    // maybe App-infos\r\n                    if (templateConfiguration.HasApp) {\r\n                        sets.App.Resources = {};\r\n                        sets.App.Settings = {};\r\n                        svc.loadContentType(sets.App.Resources, \"App-Resources\", \"App.Resources\");\r\n                        svc.loadContentType(sets.App.Settings, \"App-Settings\", \"App.Settings\");\r\n                    }\r\n                    //#endregion\r\n\r\n                    svc.cachedSnippets = sets;\r\n                    return sets;\r\n                },\r\n\r\n                // load snippets from server\r\n                loadTable: function() {\r\n                    return $http.get(\"../sxc-develop/snippets.json.js\");\r\n                },\r\n\r\n                // Convert the list into a tree with set/subset/item\r\n                makeTree: function(list) {\r\n                    var tree = {};\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        var o = list[i];\r\n                        if (tree[o.set] === undefined)\r\n                            tree[o.set] = {};\r\n                        if (tree[o.set][o.subset] === undefined)\r\n                            tree[o.set][o.subset] = [];\r\n                        var reformatted = {\r\n                            \"key\": o.name,\r\n                            \"label\": svc.label(o.set, o.subset, o.name),\r\n                            \"snip\": o.content,\r\n                            \"help\": o.help || svc.help(o.set, o.subset, o.name),\r\n                            \"links\": svc.linksList(o.links)\r\n                        };\r\n\r\n                        tree[o.set][o.subset].push(reformatted);\r\n                    }\r\n                    return tree;\r\n                },\r\n                // #endregion\r\n\r\n                // #region links\r\n                linksList: function prepareLinks(linksString) {\r\n                    if (!linksString)\r\n                        return null;\r\n                    var links = [];\r\n                    var llist = linksString.split(\"\\n\");\r\n                    for (var i = 0; i < llist.length; i++) {\r\n                        var pair = llist[i].split(\":\");\r\n                        if (pair.length === 3) {\r\n                            links.push({\"name\": pair[0].trim(), \"url\": pair[1].trim() + \":\"+ pair[2].trim()});\r\n                        }\r\n                    }\r\n                    if (links.length === 0) return null;\r\n                    return links;\r\n                },\r\n\r\n                // #endregion links\r\n\r\n                //#region help / translate\r\n                help: function help(set, subset, snip) {\r\n                    var key = svc.getHelpKey(set, subset, snip, \".Help\");\r\n\r\n                    var result = $translate.instant(key);\r\n                    if (result === key)\r\n                        result = \"\";\r\n                    return result;\r\n                },\r\n\r\n                label: function label(set, subset, snip) {\r\n                    var key = svc.getHelpKey(set, subset, snip, \".Key\");\r\n\r\n                    var result = $translate.instant(key);\r\n                    if (result === key)\r\n                        result = snip;\r\n                    return result;\r\n                },\r\n\r\n                getHelpKey: function(set, subset, snip, addition) {\r\n                    return \"SourceEditorSnippets\" + \".\" + set + \".\" + subset + \".\" + snip + addition;\r\n                },\r\n\r\n                //#endregion\r\n\r\n                //#region scan the configuration and filter unneeded snippets\r\n\r\n                // scan the list for sets starting with @ or [ and filter if not needed right now\r\n                filterAwayNotNeededSnippetsList: function(list) {\r\n                    var newList = [];\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        var itm = list[i];\r\n                        var setHasPrefix = svc.keyPrefixes.indexOf(itm.set[0]);\r\n                        if (setHasPrefix === -1 || (setHasPrefix === svc.keyPrefixIndex)) {\r\n                            // if necessary, remove first char\r\n                            if (setHasPrefix === svc.keyPrefixIndex)\r\n                                itm.set = itm.set.substr(1);\r\n\r\n                            newList.push(itm);\r\n                        }\r\n                    }\r\n                    return newList;\r\n                },\r\n\r\n\r\n                keyPrefixes: [\"@\", \"[\"],\r\n                keyPrefixIndex: (templateConfiguration.Type.indexOf(\"Razor\") > -1) ? 0 : 1,\r\n                //#endregion\r\n\r\n                //#region get fields in content types\r\n                loadContentType: function(target, type, prefix) {\r\n                    contentTypeFieldSvc(templateConfiguration.AppId, { StaticName: type }).getFields()\r\n                        .then(function(result) {\r\n                            // first add common items if the content-type actually exists\r\n                            angular.forEach(result.data, function(value) {\r\n                                var fieldname = value.StaticName;\r\n                                target[fieldname] = {\r\n                                    key: fieldname,\r\n                                    label: fieldname,\r\n                                    snip: svc.valuePlaceholder(prefix, fieldname),\r\n                                    help: value.Metadata.merged.Notes || \"\" + \" (\" + value.Type.toLowerCase() + \") \"\r\n                                };\r\n                        \r\n                                // try to add generic snippets specific to this input-type\r\n                                var snipDefaults = angular.copy(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n\r\n                                svc.inputTypes.attachSnippets(target, prefix, fieldname, value.InputType, snipDefaults);\r\n                            });\r\n\r\n                            var std = [\"EntityId\", \"EntityTitle\", \"EntityGuid\", \"EntityType\", \"IsPublished\", \"Modified\"];\r\n                            if (result.data.length)\r\n                                for (var i = 0; i < std.length; i++)\r\n                                    target[std[i]] = {\r\n                                        key: std[i],\r\n                                        label: std[i],\r\n                                        snip: svc.valuePlaceholder(prefix, std[i]),\r\n                                        help: $translate.instant(\"SourceEditorSnippets.StandardFields.\" + std[i] + \".Help\")\r\n                                    };\r\n\r\n                        });\r\n                },\r\n\r\n                valuePlaceholder: function(obj, val) {\r\n                    return (templateConfiguration.Type.indexOf(\"Razor\") > -1)\r\n                        ? \"@\" + obj + \".\" + val\r\n                        : \"[\" + obj.replace(\".\", \":\") + \":\" + val + \"]\";\r\n                },\r\n\r\n                //#endregion\r\n\r\n                /// add the list to the snippet manager so it works for typing\r\n                registerInEditor: function () {\r\n                    if (svc.list === null)\r\n                        throw \"can't register snippets because list is not loaded\";\r\n                    var snippetManager = ace.require(\"ace/snippets\").snippetManager;\r\n                    snippetManager.register(svc.list);\r\n                }\r\n            };\r\n\r\n\r\n            return svc;\r\n        };\r\n\r\n        function InputTypeSnippetHandler() {\r\n            var itsh = {\r\n                inputTypeSnippets: {},\r\n\r\n                extractInputTypeSnippets: function(list, standardArray) {\r\n                    var inputTypeArray = [];\r\n\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        var itm = list[i];\r\n                        var systemSnippet = itm.set[0] === \"\\\\\";\r\n                        if (!systemSnippet)\r\n                            standardArray.push(itm);\r\n                        else {\r\n                            itm.set = itm.set.substr(1);\r\n                            inputTypeArray.push(itm);\r\n                        }\r\n                    }\r\n                    itsh.inputTypeSnippets = itsh.catalogInputTypeSnippets(inputTypeArray);\r\n                },\r\n\r\n                catalogInputTypeSnippets: function(list) {\r\n                    var inputTypeList = {};\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        if (inputTypeList[list[i].subset] === undefined)\r\n                            inputTypeList[list[i].subset] = [];\r\n                        inputTypeList[list[i].subset].push(list[i]);\r\n                    }\r\n                    return inputTypeList;\r\n                },\r\n\r\n                attachSnippets: function(target, prefix, fieldname, inputType, snipDefaults) {\r\n                    var genericSnippet = itsh.inputTypeSnippets[inputType];\r\n                    if (inputType.indexOf(\"-\")) {   // if it's a sub-type, let's also get the master-type\r\n                        var fieldType = inputType.substr(0, inputType.indexOf(\"-\"));\r\n                        if (fieldType) {\r\n                            var typeSnips = itsh.inputTypeSnippets[fieldType];\r\n                            if (typeSnips)\r\n                                genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n                        }\r\n                    }\r\n                    if (!genericSnippet)\r\n                        return;\r\n\r\n                    if (target[fieldname].more === undefined)\r\n                        target[fieldname].more = [];\r\n                    var fieldSnips = target[fieldname].more;\r\n                    for(var g = 0;g < genericSnippet.length;g++)\r\n                        try {\r\n                            fieldSnips[fieldname + \"-\" + genericSnippet[g].name] = angular.extend({}, snipDefaults, {\r\n                                key: fieldname + \" - \" + genericSnippet[g].name,\r\n                                label: genericSnippet[g].name,\r\n                                snip: itsh.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n                                collapse: true\r\n                            });\r\n                        } finally {\r\n                        }\r\n\r\n                },\r\n\r\n                localizeGenericSnippet: function(snip, objName, fieldName) {\r\n                    snip = snip.replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, \"$1\" + objName + \"$2\")\r\n                        .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, \"$1\" + fieldName + \"$2\");\r\n                    return snip;\r\n                }\r\n            };\r\n            return itsh;\r\n        }\r\n    }]);\n\r\nangular.module(\"SourceEditor\")\r\n    /*@ngInject*/\r\n    .factory(\"sourceSvc\", [\"$http\", function ($http) {\r\n\r\n        // Construct a service for this specific appId\r\n        return function createSvc(key) {\r\n\r\n            // if the key is a string, then it's to be used as a path, otherwise as a template-id\r\n            var params = isNaN(key)\r\n                ? { path: key }\r\n                : { templateId: key };\r\n\r\n            var svc = {\r\n                get: function() {\r\n                    return $http.get(\"app-sys/appassets/asset\", { params: params })\r\n                        .then(function(result) {\r\n                            var data = result.data;\r\n                            if (data.Type.toLowerCase() === \"auto\") {\r\n                                switch(data.Extension.toLowerCase()) {\r\n                                    case \".cs\":\r\n                                    case \".cshtml\":\r\n                                        data.Type = \"Razor\";\r\n                                        break;\r\n                                    case \".html\":\r\n                                    case \".css\":\r\n                                    case \".js\":\r\n                                        data.Type = \"Token\";\r\n                                        break;\r\n                                }\r\n                            }\r\n                            return result;\r\n                        });\r\n                },\r\n\r\n                save: function(item) {\r\n                    return $http.post(\"app-sys/appassets/asset\", item, { params: params });\r\n                }\r\n            };\r\n\r\n            return svc;\r\n        };\r\n    }]);\n(function () {\r\n\r\n    angular.module(\"SourceEditor\")\r\n\r\n        // helps convert an object with keys to an array to allow sorting\r\n        // from https://github.com/petebacondarwin/angular-toArrayFilter\r\n        .filter('toArray', function() {\r\n            return function(obj, addKey) {\r\n                if (!angular.isObject(obj)) return obj;\r\n                if (addKey === false) {\r\n                    return Object.keys(obj).map(function(key) {\r\n                        return obj[key];\r\n                    });\r\n                } else {\r\n                    return Object.keys(obj).map(function(key) {\r\n                        var value = obj[key];\r\n                        return angular.isObject(value) ?\r\n                            Object.defineProperty(value, '$key', { enumerable: false, value: key }) :\r\n                            { $key: key, $value: value };\r\n                    });\r\n                }\r\n            };\r\n        });\r\n\r\n\r\n} ());\nangular.module(\"DevTemplates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"source-editor/dev-files.html\",\"<div uib-tooltip=\\\"{{ vm.fileName }}\\\" ng-click=\\\"vm.toggle()\\\">\\r\\n    {{ vm.fileName.substr(vm.fileName.lastIndexOf(\\\"\\\\\\\\\\\") + 1) }}\\r\\n    ({{vm.type }})\\r\\n    <i ng-class=\\'{\\\"eav-icon-plus-squared\\\": !vm.show, \\\"eav-icon-minus-squared\\\": vm.show}\\'></i>\\r\\n</div>\\r\\n<div ng-if=\\\"vm.show\\\">\\r\\n    <h4>quick-pick another file</h4>\\r\\n    <ol>\\r\\n        <li ng-repeat=\\\"asset in vm.assets\\\" ng-click=\\\"vm.editFile(asset)\\\">\\r\\n            {{asset}}\\r\\n        </li>\\r\\n    </ol>\\r\\n    <ul>\\r\\n        <li ng-click=\\\"vm.addFile()\\\">create file <span class=\\\"eav-icon-plus-circled\\\"></span></li>\\r\\n        <li>for copy, rename etc. please use the dnn file manager</li>\\r\\n    </ul>\\r\\n</div>\");\n$templateCache.put(\"source-editor/editor.html\",\"<div ng-click=\\\"vm.debug.autoEnableAsNeeded($event)\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <h3 class=\\\"modal-title\\\" translate=\\\"SourceEditor.Title\\\"></h3>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-8\\\">\\r\\n                <dev-files file-name=\\\"vm.view.FileName\\\" type=\\\"vm.view.Type\\\"></dev-files>\\r\\n\\r\\n                <div ng-model=\\\"vm.view.Code\\\" style=\\\"height: 600px;\\\" ui-ace=\\\"{\\r\\n                    useWrapMode : true,\\r\\n                    useSoftTabs: true,\\r\\n                    showGutter: true,\\r\\n                    theme:\\'sqlserver\\',\\r\\n                    mode: \\'razor\\',\\r\\n                    onLoad: vm.aceLoaded,\\r\\n                    require: [\\'ace/ext/language_tools\\', \\'//xyz/something\\'],\\r\\n                    advanced: {\\r\\n                        enableSnippets: true,\\r\\n                        enableBasicAutocompletion: true,\\r\\n                        enableLiveAutocompletion: true\\r\\n                    },\\r\\n                    rendererOptions: {\\r\\n                        fontSize: 16\\r\\n                    }\\r\\n                }\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"pull-right col-md-4\\\">\\r\\n                <!-- snippets wrapper - should ensure scrolling-->\\r\\n                <snippets ng-if=\\\"vm.snippets\\\" snippets=\\\"vm.snippets\\\" editor=\\\"vm.editor\\\"></snippets>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <div class=\\\"pull-left\\\">\\r\\n            <button class=\\\"btn btn-primary btn-lg xxbtn-square\\\" type=\\\"button\\\" ng-click=\\\"vm.save(false)\\\">\\r\\n                <span icon=\\\"check\\\" uib-tooltip=\\\"{{ \\'Button.SaveAndKeepOpen\\' | translate }}\\\"></span>\\r\\n                {{ \\'Button.SaveAndKeepOpen\\' | translate }}\\r\\n            </button>\\r\\n            also supports Ctrl+S\\r\\n        </div>\\r\\n    </div>\\r\\n    <show-debug-availability class=\\\"pull-right\\\"></show-debug-availability>\\r\\n    <div ng-if=\\\"vm.debug.on\\\">\\r\\n        <pre>{{vm.view.Code}}</pre>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n    /* helper to ensure that razor (which is correctly detected by ACE) is also highlighted */\\r\\n    .ace_razor {\\r\\n        background-color: yellow;\\r\\n    }\\r\\n\\r\\n    /* make sure the highlighted text is also black, otherwise it a kind of gray */\\r\\n    .ace_punctuation.ace_short.ace_razor {\\r\\n        color: black;\\r\\n    }\\r\\n\\r\\n    .ace_punctuation.ace_block.ace_razor {\\r\\n        color: black;\\r\\n    }\\r\\n</style>\");\n$templateCache.put(\"source-editor/snippets-links.html\",\"<div>\\r\\n    <div ng-repeat=\\\"link in vm.links\\\">\\r\\n        &gt; <a href=\\\"{{link.url}}\\\" target=\\\"_blank\\\">{{link.name}}</a>\\r\\n    </div>\\r\\n</div>\");\n$templateCache.put(\"source-editor/snippets.html\",\"<div>\\r\\n    <strong translate=\\\"SourceEditor.SnippetsSection.Title\\\"></strong> <i icon=\\\"question-sign\\\" style=\\\"opacity: 0.3\\\" ng-click=\\\"showSnippetInfo = !showSnippetInfo\\\"></i>\\r\\n    <div ng-if=\\\"showSnippetInfo\\\" translate=\\\"SourceEditor.SnippetsSection.Intro\\\"></div>\\r\\n</div>\\r\\n<select class=\\\"input-lg\\\"\\r\\n        style=\\\"width: 90%\\\"\\r\\n        ng-model=\\\"vm.snippetSet\\\"\\r\\n        ng-options=\\\"key as (\\'SourceEditorSnippets.\\' + key + \\'.Title\\' | translate) for (key , value) in vm.snippets\\\"\\r\\n        uib-tooltip=\\\"{{ \\'SourceEditorSnippets.\\' + vm.snippetSet + \\'.Help\\'  | translate}}\\\"></select>\\r\\n<div>&nbsp;</div>\\r\\n<div style=\\\"height: 500px; overflow: auto\\\">\\r\\n    <div ng-repeat=\\\"(subsetName, subsetValue) in vm.snippets[vm.snippetSet]\\\">\\r\\n        <strong uib-tooltip=\\\"{{ \\'SourceEditorSnippets.\\' + vm.snippetSet + \\'.\\' + subsetName + \\'.Help\\'  | translate}}\\\">{{ \\'SourceEditorSnippets.\\' + vm.snippetSet + \\'.\\' + subsetName + \\'.Title\\' | translate}}</strong>\\r\\n        <ul>\\r\\n            <li ng-repeat=\\\"value in subsetValue | toArray | orderBy: \\'$key\\'\\\" uib-tooltip=\\\"{{ value.snip }}\\\">\\r\\n                <span ng-mouseover=\\\"showAdd = true\\\" ng-click=\\\"show = !show\\\" ng-mouseout=\\\"showAdd = false\\\">\\r\\n                    <i class=\\\"eav-icon-plus-squared\\\"\\r\\n                       ng-click=\\\"vm.addSnippet(value.snip)\\\"\\r\\n                       ng-show=\\\"showAdd\\\"\\r\\n                       stop-event=\\\"click\\\"></i>\\r\\n                    {{value.label}}\\r\\n\\r\\n                    <i icon=\\\"info-sign\\\" style=\\\"opacity: 0.3\\\" ng-show=\\\"value.help\\\"></i>\\r\\n                    <a ng-show=\\\"value.more\\\"\\r\\n                       ng-click=\\\"showMore = !showMore\\\"\\r\\n                       stop-event=\\\"click\\\">\\r\\n                        <i icon=\\\"plus\\\"></i>more\\r\\n                    </a>\\r\\n                </span>\\r\\n                <div ng-if=\\\"show\\\">\\r\\n                    <em>{{value.help}}</em>\\r\\n                    <snippets-links links=\\\"value.links\\\" ng-if=\\\"value.links\\\"></snippets-links>\\r\\n                </div>\\r\\n                <ul ng-if=\\\"showMore\\\">\\r\\n                    <li ng-repeat=\\\"more in value.more | toArray | orderBy: \\'$key\\'\\\" uib-tooltip=\\\"{{ value.snip }}\\\">\\r\\n                        <span ng-click=\\\"vm.addSnippet(more.snip)\\\">{{more.label}}</span>\\r\\n                        <i icon=\\\"info-sign\\\" style=\\\"opacity: 0.3\\\" ng-click=\\\"show = !show\\\" ng-show=\\\"more.help\\\"></i>\\r\\n                        <div ng-if=\\\"show\\\">\\r\\n                            <em>{{more.help}}</em>\\r\\n                            <snippets-links links=\\\"more.links\\\" ng-if=\\\"more.links\\\"></snippets-links>\\r\\n                        </div>\\r\\n                </ul>\\r\\n            </li>\\r\\n        </ul>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\");}]);"],"sourceRoot":"/source/"}