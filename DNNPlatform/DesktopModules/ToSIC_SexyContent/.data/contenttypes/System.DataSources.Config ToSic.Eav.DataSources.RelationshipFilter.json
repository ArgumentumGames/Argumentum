{"_":{"V":1},"ContentType":{"Id":"|Config ToSic.Eav.DataSources.RelationshipFilter","Name":"ToSic.Eav.DataSources.RelationshipFilter","Scope":"System.DataSources","Description":"used to configure a RelationshipFilter DataSource","Attributes":[{"Name":"Title","Type":"String","InputType":"string-default","IsTitle":true,"Metadata":[{"Id":40511,"Version":2,"Guid":"0d03c0c9-f8ef-457d-9399-4bbb00b6e376","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"string-default"},"Name":{"*":"Title"},"Notes":{"*":"<p>just a title so you know what it's about</p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":40514,"Version":1,"Guid":"f3ffdd61-6a10-4721-9d68-aea5e4fe2987","Type":{"Name":"@string-default","Id":"@string-default"},"Attributes":{"Number":{"RowCount":{"*":1.0}}},"Owner":"dnn:userid=1"}]},{"Name":"Notes","Type":"String","InputType":"string-default","IsTitle":false,"Metadata":[{"Id":40512,"Version":2,"Guid":"803afd9b-f945-4ede-9cba-93dbe6a9c9e1","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"string-default"},"Name":{"*":"Notes"},"Notes":{"*":"<p>your notes about this filter, to help you remember what you were thinking...</p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":40515,"Version":1,"Guid":"57bbf159-cda6-499c-8884-be64b470e050","Type":{"Name":"@string-default","Id":"@string-default"},"Attributes":{"Number":{"RowCount":{"*":3.0}}},"Owner":"dnn:userid=1"}]},{"Name":"BasicsGroup","Type":"Empty","InputType":"empty-default","IsTitle":false,"Metadata":[{"Id":40522,"Version":2,"Guid":"b9c9ad66-f587-4969-91cb-aa69ead3d21b","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"empty-default"},"Name":{"*":"Basics"},"Notes":{"*":"<p>Here you can specify what relationship you are comparing for, and what value you expect in the related items. If the list contains&nbsp;<em>Book</em> items and you want to keep only those with the&nbsp;<em>Author</em> being <em>Daniel Mettler</em>, then you would type&nbsp;<strong>Author</strong> in the relationship-field and&nbsp;<strong>Daniel Mettler</strong> in the filter-value field.</p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":40524,"Version":1,"Guid":"fc2ddbe7-b52d-447d-b0d7-f195c746bd28","Type":{"Name":"@empty-default","Id":"@empty-default"},"Attributes":{"Boolean":{"DefaultCollapsed":{"*":false}}},"Owner":"dnn:userid=1"}]},{"Name":"Relationship","Type":"String","InputType":"string-default","IsTitle":false,"Metadata":[{"Id":40490,"Version":3,"Guid":"5dd119a2-79e1-4d6f-b29c-31cf6b89beef","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"string-default"},"Name":{"*":"Relationship Field"},"Notes":{"*":"<p>The property we're comparing. So if this is a list of books, and we want to check which ones have an Author called \"Daniel\", then the relationship-field is <em>Author</em></p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":40491,"Version":1,"Guid":"f59a6a53-d3ea-4668-8a07-654106dc72c1","Type":{"Name":"xx@String","Id":"xx@String"},"Attributes":{},"Owner":"dnn:userid=1"}]},{"Name":"Filter","Type":"String","InputType":"string-default","IsTitle":false,"Metadata":[{"Id":40492,"Version":8,"Guid":"b2cf2638-4914-4987-8526-d94e5c0563d6","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"string-default"},"Name":{"*":"Filter (on the related items)"},"Notes":{"*":"<p>the value we want in the related data - if you're on a book-list and only want those with the Author \"Daniel\", then this is where you would write <em>Daniel.&nbsp;</em>Remember that you can also use tokens, like [QueryString:Author]</p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":40493,"Version":1,"Guid":"a66db65a-fac1-415c-a370-a1597ea58ca0","Type":{"Name":"xx@String","Id":"xx@String"},"Attributes":{},"Owner":"dnn:userid=1"},{"Id":40516,"Version":3,"Guid":"60832427-0db9-45c3-8566-60ba0ed82b6d","Type":{"Name":"@string-default","Id":"@string-default"},"Attributes":{"Number":{"RowCount":{"*":1.0}}},"Owner":"dnn:userid=1"}]},{"Name":"AdvancedGroup","Type":"Empty","InputType":"empty-default","IsTitle":false,"Metadata":[{"Id":40523,"Version":2,"Guid":"8335b7a4-609e-4d57-a0b5-ddd7c86f826d","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"empty-default"},"Name":{"*":"Advanced Settings"},"Notes":{"*":"<p>Sometimes you want to use much more advanced comparisons or compare on another field than just the title.&nbsp;</p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":40525,"Version":1,"Guid":"35612763-eb87-4eab-92db-039f8675c85d","Type":{"Name":"@empty-default","Id":"@empty-default"},"Attributes":{"Boolean":{"DefaultCollapsed":{"*":true}}},"Owner":"dnn:userid=1"}]},{"Name":"AttributeOnRelationship","Type":"String","InputType":"string-default","IsTitle":false,"Metadata":[{"Id":40513,"Version":2,"Guid":"e4254d87-c48d-400f-8637-81f3aeee0678","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":"EntityTitle"},"InputType":{"*":"string-default"},"Name":{"*":"Relationship Attribute"},"Notes":{"*":"<p>The field of the related items we're checking for. By default it's the title (EntityTitle), but you could also check for the ID (EntityId) or for other properties. For example, if you have a list of books and you only want to keep those of Authors who are from Switzerland, then here you would <em>not</em> write EntityTitle, but instead <em>Country</em>.</p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":40517,"Version":1,"Guid":"af83298d-2955-4471-be4e-caf1b6be042a","Type":{"Name":"@string-default","Id":"@string-default"},"Attributes":{"Number":{"RowCount":{"*":1.0}}},"Owner":"dnn:userid=1"}]},{"Name":"Comparison","Type":"String","InputType":"string-dropdown","IsTitle":false,"Metadata":[{"Id":40518,"Version":9,"Guid":"882c82bc-25d8-4fad-9af0-5cfd19b5524f","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"string-dropdown"},"Name":{"*":"Operation / Comparison"},"Notes":{"*":"<p>This determines how we will compare. The following operations exist in 2sxc 9.9+:</p>\n<ol>\n<li>the (blank) default is the same as&nbsp;<strong>contains</strong>&nbsp;- we will check if the related items contains such an item, so if in a list of tags, one has <em>all</em> the mentioned tag(s)</li>\n<li>with a <strong>not-contains</strong> the related items may not contain <em>all</em> of the tags&nbsp;</li>\n<li>if you use <strong>containsany</strong>, it will return all items where the related-items has <em>any one</em> of the filter criterias</li>\n<li>with a <strong>not-containsany</strong>, it will return those which don't have any of the items you listed in filter</li>\n<li>in case of a&nbsp;<strong>first</strong> the first item in the relationships must be what we want - this is typical for lists where the first item is like the primary category. If you specify multiple items in filter, the first will be valid if it matches any of those.</li>\n<li>in case of a <strong>not-first</strong> the first item may not match this</li>\n<li>use <strong>any&nbsp;</strong>it will ignore the filter-value and simply keep all items having any relationships&nbsp;</li>\n<li>with <strong>not-any</strong> it will return all items not having any relationships</li>\n<li>with&nbsp;<strong>count</strong> it will keep all items having exactly the desired amount of related-items, the amount is specified in the <em>filter</em>-field</li>\n<li>if <strong>not-count</strong> it will keep all items having a different amount than the desired amount</li>\n</ol>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":42341,"Version":4,"Guid":"03f819e8-8e60-439a-81cb-fa19e2ec79e8","Type":{"Name":"@string-dropdown","Id":"@string-dropdown"},"Attributes":{"String":{"DropdownValues":{"*":"(default = contains):\ncontains - keep these that have all of these:contains\nnot-contains - keep these that don't have all:not-contains\ncontainsany - keep these that have any of these:containsany\nnot-containsany - keep these that have none of these:not-containsany\nfirst - keep these where the first item is one of these:first\nnot-first - keep these where the first item is none of these:not-first\nany - keep these that have relationships:any\nnot-any - keep these that have no relationships:not-any\ncount - keep these with the exact child-amount in filter:count\nnot-count - keep these with a different child amount than in filter:not-count"}},"Boolean":{"EnableTextEntry":{"*":true}}},"Owner":"dnn:userid=1"}]},{"Name":"Separator","Type":"String","InputType":"string-dropdown","IsTitle":false,"Metadata":[{"Id":40520,"Version":8,"Guid":"0ae70c4f-40fd-45b2-89db-5eef37b5076b","Type":{"Name":"@All","Id":"@All"},"Attributes":{"String":{"CustomJavaScript":{"*":""},"DefaultValue":{"*":""},"InputType":{"*":"string-dropdown"},"Name":{"*":"Separator Character"},"Notes":{"*":"<p>if you want to check for multiple relationships (like having multiple tags), then the filter-value will contain a string with multiple values. By default the separator is blank - so the filter-value will not be separated. Usually you would use a comma, so that you can write \"online,2017,seo\", but there are cases where your strings may themselves contain commas - so this is why you can specify your own separation character.</p>"},"ValidationRegExJavaScript":{"*":""}},"Entity":{"Errors":{"*":[]},"Warnings":{"*":[]}},"Boolean":{"Disabled":{"*":false},"Required":{"*":false},"VisibleInEditUI":{"*":true}}},"Owner":"dnn:userid=1"},{"Id":42342,"Version":3,"Guid":"901e562b-fdd6-4f68-afdc-5e7fbbdaa6e1","Type":{"Name":"@string-dropdown","Id":"@string-dropdown"},"Attributes":{"String":{"DropdownValues":{"*":"(none):\ncomma ,:,\nbar / pipe |:|"}},"Boolean":{"EnableTextEntry":{"*":true}}},"Owner":"dnn:userid=1"}]}],"Metadata":[{"Id":40510,"Version":3,"Guid":"db398e88-fc4e-4062-918e-b731ab2bae6f","Type":{"Name":"ContentType","Id":"ContentType"},"Attributes":{"String":{"Description":{"*":"used to configure a RelationshipFilter DataSource"},"EditInstructions":{"*":"<p>This will filter the items and only return those with the relationship-requirements as configured. You can find more instructions in the 2sxc wiki about the <a href=\"https://r.2sxc.org/DsRelationshipFilter\" target=\"_blank\" rel=\"noopener\">Relationship Filter</a>.</p>"},"Label":{"*":"Relationship Filter"},"ListInstructions":{"*":""},"Notes":{"*":""}},"Hyperlink":{"Icon":{"*":""},"Link":{"*":""}}},"Owner":"dnn:userid=1","For":{"Target":"ContentType","String":"|Config ToSic.Eav.DataSources.RelationshipFilter"}}]}}