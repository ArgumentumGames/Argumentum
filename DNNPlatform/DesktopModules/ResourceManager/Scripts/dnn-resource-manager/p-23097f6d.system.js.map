{"version":3,"sources":["../../../../node_modules/@stencil/core/internal/client/patch-browser.js","@lazy-browser-entrypoint?app-data=conditional"],"names":["patchBrowser","importMeta","module","meta","url","opts","resourcesUrl","URL","href","promiseResolve","then","options","bootstrapLazy","width","height","resx","quality","preventUndersized","view","expandText","collapseText","expanded","color","colorBoxHeight","currentColor","rgbDisplay","hslDisplay","hexDisplay","sortDirection","checked","disabled","moduleId","foldersExpanded","folderMappings","addFolderTypeUrl","splitterWidth","splitWidthPercentage","leftWidth","rightWidth","setSplitWidthPercentage","getSplitWidthPercentage","sortDropdownExpanded","syncDropdownExpanded","preloadOffset","currentItems","parentFolderId","showDropdownButton","showDropdownMenu","queuedFiles","alreadyExistingFilesCount","uploadingFilesCount","uploadedFilesCount","failedFilesCount","item","file","extract","validationCode","filter","maxUploadFileSize","overwrite","fileUploadResults","progress","successMessage","allowedExtensions","allowCameraMode","captureQuality","canTakeSnapshots","takingPicture","items","folderContents","selectedFolder","folder","folderIconUrl","moving","movedCount","currentItemName","hasChildren","folderId","roleGroups","roles","folderDetails","foundUsers","fileId","fileDetails","deleting","deletedCount","unlinking","unlinkedCount","newFolderRequest","permissions","selectedRoleGroupId","userQuery","pickedUser","tabTitle","visible","show","hide","tabTitles","selectedTabTitle","transitionDuration","updateSize","value","max","placeholder","debounced","query","useIntermediate","type","reversed","size","confirm","confirmYesText","confirmNoText","confirmMessage","modalVisible","backdropDismiss","closeText","showCloseButton"],"mappings":"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","sourcesContent":["/*\n Stencil Client Patch Browser v2.18.0 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nimport { consoleDevInfo, plt, win, doc, promiseResolve, H } from '@stencil/core';\nconst getDynamicImportFunction = (namespace) => `__sc_import_${namespace.replace(/\\s|-/g, '_')}`;\nconst patchBrowser = () => {\n    // NOTE!! This fn cannot use async/await!\n    if (BUILD.isDev && !BUILD.isTesting) {\n        consoleDevInfo('Running in development mode.');\n    }\n    if (BUILD.cssVarShim) {\n        // shim css vars\n        plt.$cssShim$ = win.__cssshim;\n    }\n    if (BUILD.cloneNodeFix) {\n        // opted-in to polyfill cloneNode() for slot polyfilled components\n        patchCloneNodeFix(H.prototype);\n    }\n    if (BUILD.profile && !performance.mark) {\n        // not all browsers support performance.mark/measure (Safari 10)\n        // because the mark/measure APIs are designed to write entries to a buffer in the browser that does not exist,\n        // simply stub the implementations out.\n        // TODO(STENCIL-323): Remove this patch when support for older browsers is removed (breaking)\n        // @ts-ignore\n        performance.mark = performance.measure = () => {\n            /*noop*/\n        };\n        performance.getEntriesByName = () => [];\n    }\n    // @ts-ignore\n    const scriptElm = BUILD.scriptDataOpts || BUILD.safari10 || BUILD.dynamicImportShim\n        ? Array.from(doc.querySelectorAll('script')).find((s) => new RegExp(`\\/${NAMESPACE}(\\\\.esm)?\\\\.js($|\\\\?|#)`).test(s.src) ||\n            s.getAttribute('data-stencil-namespace') === NAMESPACE)\n        : null;\n    const importMeta = import.meta.url;\n    const opts = BUILD.scriptDataOpts ? scriptElm['data-opts'] || {} : {};\n    if (BUILD.safari10 && 'onbeforeload' in scriptElm && !history.scrollRestoration /* IS_ESM_BUILD */) {\n        // Safari < v11 support: This IF is true if it's Safari below v11.\n        // This fn cannot use async/await since Safari didn't support it until v11,\n        // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n        // so both the ESM file and nomodule file would get downloaded. Only Safari\n        // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n        // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n        // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n        return {\n            then() {\n                /* promise noop */\n            },\n        };\n    }\n    if (!BUILD.safari10 && importMeta !== '') {\n        opts.resourcesUrl = new URL('.', importMeta).href;\n    }\n    else if (BUILD.dynamicImportShim || BUILD.safari10) {\n        opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n        if (BUILD.dynamicImportShim) {\n            patchDynamicImport(opts.resourcesUrl, scriptElm);\n        }\n        if (BUILD.dynamicImportShim && !win.customElements) {\n            // module support, but no custom elements support (Old Edge)\n            // @ts-ignore\n            return import(/* webpackChunkName: \"polyfills-dom\" */ './dom.js').then(() => opts);\n        }\n    }\n    return promiseResolve(opts);\n};\nconst patchDynamicImport = (base, orgScriptElm) => {\n    const importFunctionName = getDynamicImportFunction(NAMESPACE);\n    try {\n        // test if this browser supports dynamic imports\n        // There is a caching issue in V8, that breaks using import() in Function\n        // By generating a random string, we can workaround it\n        // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n        win[importFunctionName] = new Function('w', `return import(w);//${Math.random()}`);\n    }\n    catch (e) {\n        // this shim is specifically for browsers that do support \"esm\" imports\n        // however, they do NOT support \"dynamic\" imports\n        // basically this code is for old Edge, v18 and below\n        const moduleMap = new Map();\n        win[importFunctionName] = (src) => {\n            const url = new URL(src, base).href;\n            let mod = moduleMap.get(url);\n            if (!mod) {\n                const script = doc.createElement('script');\n                script.type = 'module';\n                script.crossOrigin = orgScriptElm.crossOrigin;\n                script.src = URL.createObjectURL(new Blob([`import * as m from '${url}'; window.${importFunctionName}.m = m;`], {\n                    type: 'application/javascript',\n                }));\n                mod = new Promise((resolve) => {\n                    script.onload = () => {\n                        resolve(win[importFunctionName].m);\n                        script.remove();\n                    };\n                });\n                moduleMap.set(url, mod);\n                doc.head.appendChild(script);\n            }\n            return mod;\n        };\n    }\n};\nconst patchCloneNodeFix = (HTMLElementPrototype) => {\n    const nativeCloneNodeFn = HTMLElementPrototype.cloneNode;\n    HTMLElementPrototype.cloneNode = function (deep) {\n        if (this.nodeName === 'TEMPLATE') {\n            return nativeCloneNodeFn.call(this, deep);\n        }\n        const clonedNode = nativeCloneNodeFn.call(this, false);\n        const srcChildNodes = this.childNodes;\n        if (deep) {\n            for (let i = 0; i < srcChildNodes.length; i++) {\n                // Node.ATTRIBUTE_NODE === 2, and checking because IE11\n                if (srcChildNodes[i].nodeType !== 2) {\n                    clonedNode.appendChild(srcChildNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nexport { patchBrowser };\n","import { bootstrapLazy } from '@stencil/core';\nimport { patchBrowser } from '@stencil/core/internal/client/patch-browser';\nimport { globalScripts } from '@stencil/core/internal/app-globals';\npatchBrowser().then(options => {\n  globalScripts();\n  return bootstrapLazy([/*!__STENCIL_LAZY_DATA__*/], options);\n});\n"]}