{"version":3,"sources":["../../../../node_modules/@dnncommunity/dnn-elements/dist/collection/components/dnn-image-cropper/CornerType.js","../../../../node_modules/@dnncommunity/dnn-elements/dist/collection/components/dnn-image-cropper/dnn-image-cropper.css?tag=dnn-image-cropper&encapsulation=shadow","../../../../node_modules/@dnncommunity/dnn-elements/dist/collection/components/dnn-image-cropper/dnn-image-cropper.js"],"names":["CornerType","dnnImageCropperCss","DnnImageCropper","exports","class_1","hostRef","_this","this","width","height","resx","capture","dragAndDropFile","or","takePicture","uploadFile","imageTooSmall","modalCloseText","quality","preventUndersized","handleCropMouseDown","event","stopPropagation","preventDefault","element","target","className","classList","document","addEventListener","handleImageCropFinished","handleCropDrag","removeEventListener","handleNwMouseMove","handleNeMouseMove","handleSeMouseMove","handleSwMouseMove","_ev","emitImage","previousTouch","undefined","handleCornerDrag","nw","ne","se","sw","corner","isMouseStillInTarget","_a","getCornerLeftTop","left","top","newWidth","newHeight","orientation","wantedRatio","cropRect","crop","getBoundingClientRect","imageRect","image","_b","getMovementFromEvent","movementX","movementY","Math","abs","topOffset","offsetTop","leftOffset","offsetLeft","zoomRatio","naturalWidth","style","concat","ev","newLeft","newTop","prototype","componentDidLoad","requestAnimationFrame","setView","newView","views","host","shadowRoot","querySelectorAll","forEach","v","remove","noPictureView","add","hasPictureView","view","initCrop","imageRatio","wantedHeight","diff","round","toString","wantedWidth","setImage","src","canvas","toDataURL","handleNewFile","file","type","split","reader","FileReader","onload","readerLoadEvent","img","Image","imageTooSmallModal","show","ctx","getContext","drawImage","result","readAsDataURL","x","y","naturalHeight","dataUrl","generateCroppedImage","imageCropChanged","emit","desiredWidth","desiredHeight","context","clearRect","inside","mouseX","mouseY","MouseEvent","clientX","clientY","TouchEvent","touch","touches","corners","cornerRect","render","h","Host","ref","el","class","e","onMouseDown","onTouchStart","allowCameraMode","onFilesSelected","detail","close-text","replace"],"mappings":"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","sourcesContent":["export var CornerType;\n(function (CornerType) {\n  CornerType[CornerType[\"nw\"] = 0] = \"nw\";\n  CornerType[CornerType[\"ne\"] = 1] = \"ne\";\n  CornerType[CornerType[\"se\"] = 2] = \"se\";\n  CornerType[CornerType[\"sw\"] = 3] = \"sw\";\n})(CornerType || (CornerType = {}));\n;\n//# sourceMappingURL=CornerType.js.map\n",":host {\n  display: block;\n}\n\ncanvas {\n  display: none;\n}\n\n.view {\n  visibility: hidden;\n  opacity: 0;\n  height: 0;\n  overflow: hidden;\n  transition: all 300ms ease-in-out;\n}\n.view.visible {\n  visibility: visible;\n  opacity: 1;\n  height: initial;\n  overflow: visible;\n}\n.view .cropper {\n  position: relative;\n  width: 100%;\n}\n.view .cropper img {\n  width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n.view .cropper .backdrop {\n  backdrop-filter: saturate(0.5);\n  backdrop-filter: brightness(0.5);\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n.view .cropper .crop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  outline: 2px dashed white;\n  box-shadow: black 0 0 0px 2px;\n  backdrop-filter: saturate(2);\n  backdrop-filter: brightness(2);\n  cursor: move;\n}\n.view .cropper .crop > div {\n  width: 20px;\n  height: 20px;\n  background-color: white;\n  border: 2px solid rgba(0, 0, 0, 0.5);\n  position: absolute;\n}\n.view .cropper .crop > div.nw, .view .cropper .crop > div.ne {\n  top: -17px;\n}\n.view .cropper .crop > div.ne, .view .cropper .crop > div.se {\n  right: -17px;\n}\n.view .cropper .crop > div.se, .view .cropper .crop > div.sw {\n  bottom: -17px;\n}\n.view .cropper .crop > div.sw, .view .cropper .crop > div.nw {\n  left: -17px;\n}\n.view .cropper .crop > div.nw, .view .cropper .crop > div.se {\n  cursor: nwse-resize;\n}\n.view .cropper .crop > div.ne, .view .cropper .crop > div.sw {\n  cursor: nesw-resize;\n}\n\ndnn-modal {\n  --max-width: 512px;\n}","import { Host, h } from '@stencil/core';\nimport { CornerType } from './CornerType';\nimport { getMovementFromEvent } from \"../../utilities/mouseUtilities\";\n/**\n * Allows cropping an image in-browser with the option to enforce a specific final size.\n * All computation happens in the browser and the final image is emmited\n * in an event that has a data-url of the image.\n */\nexport class DnnImageCropper {\n  constructor() {\n    /** Sets the desired final image width. */\n    this.width = 600;\n    /** Sets the desired final image height. */\n    this.height = 600;\n    /** Can be used to customize controls text.\n     * Some values support tokens, see default values for examples.\n    */\n    this.resx = {\n      capture: \"Capture\",\n      dragAndDropFile: \"Drag and drop an image\",\n      or: \"or\",\n      takePicture: \"Take a picture\",\n      uploadFile: \"Upload an image\",\n      imageTooSmall: \"The image you are attempting to upload does not meet the minimum size requirement of {width} pixels by {height} pixels. Please upload a larger image.\",\n      modalCloseText: \"Close\",\n    };\n    /** Sets the output quality of the corpped image (number between 0 and 1). */\n    this.quality = 0.8;\n    /** When set to true, prevents cropping an image smaller than the required size, which would blow pixel and make the final picture look blurry. */\n    this.preventUndersized = false;\n    this.handleCropMouseDown = (event) => {\n      event.stopPropagation();\n      event.preventDefault();\n      const element = event.target;\n      const className = element.classList[0];\n      document.addEventListener(\"mouseup\", this.handleImageCropFinished, false);\n      document.addEventListener(\"touchend\", this.handleImageCropFinished, false);\n      switch (className) {\n        case \"crop\":\n          document.addEventListener(\"mousemove\", this.handleCropDrag, false);\n          document.addEventListener(\"touchmove\", this.handleCropDrag, false);\n          document.addEventListener(\"mouseup\", () => document.removeEventListener(\"mousemove\", this.handleCropDrag));\n          document.addEventListener(\"touchend\", () => document.removeEventListener(\"touchmove\", this.handleCropDrag));\n          break;\n        case \"nw\":\n          document.addEventListener(\"mousemove\", this.handleNwMouseMove, false);\n          document.addEventListener(\"touchmove\", this.handleNwMouseMove, false);\n          document.addEventListener(\"mouseup\", () => document.removeEventListener(\"mousemove\", this.handleNwMouseMove));\n          document.addEventListener(\"touchend\", () => document.removeEventListener(\"touchmove\", this.handleNwMouseMove));\n          break;\n        case \"ne\":\n          document.addEventListener(\"mousemove\", this.handleNeMouseMove, false);\n          document.addEventListener(\"touchmove\", this.handleNeMouseMove, false);\n          document.addEventListener(\"mouseup\", () => document.removeEventListener(\"mousemove\", this.handleNeMouseMove));\n          document.addEventListener(\"touchend\", () => document.removeEventListener(\"touchmove\", this.handleNeMouseMove));\n          break;\n        case \"se\":\n          document.addEventListener(\"mousemove\", this.handleSeMouseMove, false);\n          document.addEventListener(\"touchmove\", this.handleSeMouseMove, false);\n          document.addEventListener(\"mouseup\", () => document.removeEventListener(\"mousemove\", this.handleSeMouseMove));\n          document.addEventListener(\"touchend\", () => document.removeEventListener(\"touchmove\", this.handleSeMouseMove));\n          break;\n        case \"sw\":\n          document.addEventListener(\"mousemove\", this.handleSwMouseMove, false);\n          document.addEventListener(\"touchmove\", this.handleSwMouseMove, false);\n          document.addEventListener(\"mouseup\", () => document.removeEventListener(\"mousemove\", this.handleSwMouseMove));\n          document.addEventListener(\"touchend\", () => document.removeEventListener(\"touchmove\", this.handleSwMouseMove));\n          break;\n        default:\n          break;\n      }\n    };\n    this.handleImageCropFinished = (_ev) => {\n      this.emitImage();\n      document.removeEventListener(\"mouseup\", this.handleImageCropFinished);\n      this.previousTouch = undefined;\n    };\n    this.handleNwMouseMove = (event) => {\n      this.handleCornerDrag(event, CornerType.nw);\n    };\n    this.handleNeMouseMove = (event) => {\n      this.handleCornerDrag(event, CornerType.ne);\n    };\n    this.handleSeMouseMove = (event) => {\n      this.handleCornerDrag(event, CornerType.se);\n    };\n    this.handleSwMouseMove = (event) => {\n      this.handleCornerDrag(event, CornerType.sw);\n    };\n    this.handleCornerDrag = (event, corner) => {\n      if (!this.isMouseStillInTarget(event)) {\n        return;\n      }\n      let { left, top } = this.getCornerLeftTop(corner);\n      let newWidth = 0;\n      let newHeight = 0;\n      let orientation = \"horizontal\";\n      const wantedRatio = this.width / this.height;\n      const cropRect = this.crop.getBoundingClientRect();\n      const imageRect = this.image.getBoundingClientRect();\n      let { movementX, movementY } = getMovementFromEvent(event, this.previousTouch);\n      if (Math.abs(movementX) < Math.abs(movementY)) {\n        orientation = \"vertical\";\n      }\n      if (orientation == \"horizontal\") {\n        switch (corner) {\n          case CornerType.nw:\n          case CornerType.sw:\n            newWidth = cropRect.width - movementX;\n            newHeight = newWidth / wantedRatio;\n            break;\n          case CornerType.ne:\n          case CornerType.se:\n            newWidth = cropRect.width + movementX;\n            newHeight = newWidth / wantedRatio;\n            break;\n          default:\n            break;\n        }\n      }\n      else {\n        switch (corner) {\n          case CornerType.nw:\n          case CornerType.ne:\n            newHeight = cropRect.height - movementY;\n            newWidth = newHeight * wantedRatio;\n            break;\n          case CornerType.se:\n          case CornerType.sw:\n            newHeight = cropRect.height + movementY;\n            newWidth = newHeight * wantedRatio;\n            break;\n          default:\n            break;\n        }\n      }\n      switch (corner) {\n        case CornerType.ne:\n        case CornerType.nw:\n          const topOffset = cropRect.height - newHeight;\n          top = this.crop.offsetTop + topOffset;\n        default:\n          break;\n      }\n      switch (corner) {\n        case CornerType.nw:\n        case CornerType.sw:\n          const leftOffset = cropRect.width - newWidth;\n          left = this.crop.offsetLeft + leftOffset;\n          if (left < 0)\n            left = 0;\n          if (left > imageRect.width)\n            left = imageRect.width;\n          if (top < 0)\n            top = 0;\n          if (top > imageRect.height)\n            top = imageRect.height;\n          if (left + newWidth > imageRect.width)\n            newWidth = imageRect.width - left;\n          if (top + newHeight > imageRect.height)\n            newHeight = imageRect.height - top;\n          break;\n        case CornerType.ne:\n        case CornerType.se:\n          if (top < 0)\n            top = 0;\n          if (top > imageRect.height)\n            top = imageRect.height;\n          if (left + newWidth > imageRect.width)\n            newWidth = imageRect.width - left;\n          if (top + newHeight > imageRect.height)\n            newHeight = imageRect.height - top;\n          break;\n        default:\n          break;\n      }\n      if (newWidth / newHeight != wantedRatio) {\n        return;\n      }\n      if (this.preventUndersized) {\n        const zoomRatio = this.image.width / this.image.naturalWidth;\n        if (newWidth / zoomRatio < this.width || newHeight / zoomRatio < this.height) {\n          return;\n        }\n      }\n      switch (corner) {\n        case CornerType.ne:\n          this.crop.style.top = `${top}px`;\n          this.crop.style.width = `${newWidth}px`;\n          this.crop.style.height = `${newHeight}px`;\n          break;\n        case CornerType.nw:\n          this.crop.style.left = `${left}px`;\n          this.crop.style.top = `${top}px`;\n          this.crop.style.width = `${newWidth}px`;\n          this.crop.style.height = `${newHeight}px`;\n          break;\n        case CornerType.se:\n          this.crop.style.width = `${newWidth}px`;\n          this.crop.style.height = `${newHeight}px`;\n          break;\n        case CornerType.sw:\n          this.crop.style.left = `${left}px`;\n          this.crop.style.width = `${newWidth}px`;\n          this.crop.style.height = `${newHeight}px`;\n          break;\n        default:\n          break;\n      }\n    };\n    this.handleCropDrag = (ev) => {\n      if (!this.isMouseStillInTarget(ev)) {\n        return;\n      }\n      let { movementX, movementY } = getMovementFromEvent(ev, this.previousTouch);\n      let newLeft = this.crop.offsetLeft + movementX;\n      let newTop = this.crop.offsetTop + movementY;\n      var imageRect = this.image.getBoundingClientRect();\n      var cropRect = this.crop.getBoundingClientRect();\n      if (newLeft < 0) {\n        newLeft = 0;\n      }\n      if (newTop < 0) {\n        newTop = 0;\n      }\n      if (newLeft + cropRect.width > imageRect.width) {\n        newLeft = this.crop.offsetLeft;\n      }\n      if (newTop + cropRect.height > imageRect.height) {\n        newTop = this.crop.offsetTop;\n      }\n      this.crop.style.left = newLeft + \"px\";\n      this.crop.style.top = newTop + \"px\";\n    };\n  }\n  componentDidLoad() {\n    requestAnimationFrame(() => {\n      this.setView(\"noPictureView\");\n    });\n  }\n  setView(newView) {\n    const views = this.host.shadowRoot.querySelectorAll(\".view\");\n    views.forEach(v => v.classList.remove(\"visible\"));\n    switch (newView) {\n      case \"noPictureView\":\n        this.noPictureView.classList.add(\"visible\");\n        break;\n      case \"hasPictureView\":\n        this.hasPictureView.classList.add(\"visible\");\n        break;\n      default:\n        break;\n    }\n    this.view = newView;\n  }\n  initCrop() {\n    var wantedRatio = this.width / this.height;\n    var imageRect = this.image.getBoundingClientRect();\n    var imageRatio = imageRect.width / imageRect.height;\n    if (wantedRatio > imageRatio) {\n      var wantedHeight = imageRect.width / wantedRatio;\n      var diff = imageRect.height - wantedHeight;\n      this.crop.style.top = Math.round(diff / 2).toString() + \"px\";\n      this.crop.style.height = Math.round(wantedHeight).toString() + \"px\";\n    }\n    else {\n      var wantedWidth = imageRect.height * wantedRatio;\n      var diff = imageRect.width - wantedWidth;\n      this.crop.style.left = Math.round(diff / 2).toString() + \"px\";\n      this.crop.style.width = Math.round(wantedWidth).toString() + \"px\";\n    }\n  }\n  setImage() {\n    this.image.addEventListener('load', () => {\n      this.initCrop();\n      this.emitImage();\n    });\n    this.image.src = this.canvas.toDataURL();\n  }\n  handleNewFile(file) {\n    if (file.type.split('/')[0] != \"image\") {\n      return;\n    }\n    var reader = new FileReader();\n    reader.onload = readerLoadEvent => {\n      var img = new Image();\n      img.onload = () => {\n        this.canvas.width = img.width;\n        this.canvas.height = img.height;\n        if (this.preventUndersized && (img.width < this.width || img.height < this.height)) {\n          this.imageTooSmallModal.show();\n          return;\n        }\n        var ctx = this.canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        this.setView(\"hasPictureView\");\n        this.setImage();\n      };\n      img.src = readerLoadEvent.target.result.toString();\n    };\n    reader.readAsDataURL(file);\n  }\n  emitImage() {\n    var x = this.crop.offsetLeft / this.image.width * this.image.naturalWidth;\n    var y = this.crop.offsetTop / this.image.height * this.image.naturalHeight;\n    var cropRect = this.crop.getBoundingClientRect();\n    var width = cropRect.width / this.image.width * this.image.naturalWidth;\n    var height = cropRect.height / this.image.height * this.image.naturalHeight;\n    if (x < 0)\n      x = 0;\n    if (x > this.image.naturalWidth)\n      x = this.image.naturalWidth;\n    if (y < 0)\n      y = 0;\n    if (y > this.image.naturalWidth)\n      y = this.image.naturalWidth;\n    if (width > this.image.naturalWidth)\n      width = this.image.naturalWidth;\n    if (height > this.image.naturalHeight)\n      height = this.image.naturalHeight;\n    var dataUrl = this.generateCroppedImage(x, y, width, height, this.width, this.height);\n    this.imageCropChanged.emit(dataUrl);\n  }\n  generateCroppedImage(x, y, width, height, desiredWidth, desiredHeight) {\n    this.canvas.width = desiredWidth;\n    this.canvas.height = desiredHeight;\n    const context = this.canvas.getContext(\"2d\");\n    context.clearRect(0, 0, desiredWidth, desiredHeight);\n    context.drawImage(this.image, x, y, width, height, 0, 0, desiredWidth, desiredHeight);\n    return this.canvas.toDataURL(\"image/jpeg\", this.quality);\n  }\n  getCornerLeftTop(corner) {\n    let left = 0;\n    let top = 0;\n    switch (corner) {\n      case CornerType.se:\n        left = this.crop.offsetLeft;\n        top = this.crop.offsetTop;\n        break;\n      case CornerType.sw:\n        top = this.crop.offsetTop;\n        break;\n      default:\n        break;\n    }\n    return { top, left };\n  }\n  isMouseStillInTarget(event) {\n    var inside = false;\n    let mouseX;\n    let mouseY;\n    const imageRect = this.image.getBoundingClientRect();\n    if (event instanceof MouseEvent) {\n      mouseX = event.clientX;\n      mouseY = event.clientY;\n    }\n    if (typeof TouchEvent !== \"undefined\") {\n      if (event instanceof TouchEvent) {\n        var touch = event.touches[0];\n        mouseX = touch.clientX;\n        mouseY = touch.clientY;\n      }\n    }\n    if (mouseX >= imageRect.x &&\n      mouseY >= imageRect.y &&\n      mouseX <= imageRect.left + imageRect.width &&\n      mouseY <= imageRect.top + imageRect.height) {\n      inside = true;\n    }\n    var corners = this.crop.querySelectorAll(\"div\");\n    corners.forEach(corner => {\n      var cornerRect = corner.getBoundingClientRect();\n      if (mouseX >= cornerRect.x &&\n        mouseY >= cornerRect.y &&\n        mouseX <= cornerRect.left + cornerRect.width &&\n        mouseY <= cornerRect.top + cornerRect.height) {\n        inside = true;\n      }\n    });\n    return inside;\n  }\n  render() {\n    return (h(Host, { ref: el => this.host = el }, h(\"canvas\", { ref: el => this.canvas = el }), h(\"div\", { class: \"view\", ref: el => this.hasPictureView = el }, h(\"div\", { class: \"cropper\" }, h(\"img\", { ref: el => this.image = el }), h(\"div\", { class: \"backdrop\" }), h(\"div\", { class: \"crop\", ref: e => this.crop = e, onMouseDown: this.handleCropMouseDown, onTouchStart: this.handleCropMouseDown }, h(\"div\", { class: \"nw\" }), h(\"div\", { class: \"ne\" }), h(\"div\", { class: \"se\" }), h(\"div\", { class: \"sw\" })))), h(\"div\", { class: \"view\", ref: el => this.noPictureView = el }, h(\"dnn-dropzone\", { allowCameraMode: true, onFilesSelected: e => this.handleNewFile(e.detail[0]), resx: {\n        capture: this.resx.capture,\n        dragAndDropFile: this.resx.dragAndDropFile,\n        or: this.resx.or,\n        takePicture: this.resx.takePicture,\n        uploadFile: this.resx.uploadFile,\n      } })), h(\"dnn-modal\", { ref: el => this.imageTooSmallModal = el, \"close-text\": this.resx.modalCloseText }, h(\"p\", null, this.resx.imageTooSmall.replace(\"{width}\", this.width.toString()).replace(\"{height}\", this.height.toString())))));\n  }\n  static get is() { return \"dnn-image-cropper\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"dnn-image-cropper.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"dnn-image-cropper.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"width\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Sets the desired final image width.\"\n        },\n        \"attribute\": \"width\",\n        \"reflect\": false,\n        \"defaultValue\": \"600\"\n      },\n      \"height\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Sets the desired final image height.\"\n        },\n        \"attribute\": \"height\",\n        \"reflect\": false,\n        \"defaultValue\": \"600\"\n      },\n      \"resx\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"{\\n    capture: string;\\n    dragAndDropFile: string;\\n    or: string;\\n    takePicture: string;\\n    uploadFile: string;\\n    imageTooSmall: string;\\n    modalCloseText: string;\\n  }\",\n          \"resolved\": \"{ capture: string; dragAndDropFile: string; or: string; takePicture: string; uploadFile: string; imageTooSmall: string; modalCloseText: string; }\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Can be used to customize controls text.\\nSome values support tokens, see default values for examples.\"\n        },\n        \"defaultValue\": \"{\\n    capture: \\\"Capture\\\",\\n    dragAndDropFile: \\\"Drag and drop an image\\\",\\n    or: \\\"or\\\",\\n    takePicture: \\\"Take a picture\\\",\\n    uploadFile: \\\"Upload an image\\\",\\n    imageTooSmall: \\\"The image you are attempting to upload does not meet the minimum size requirement of {width} pixels by {height} pixels. Please upload a larger image.\\\",\\n    modalCloseText: \\\"Close\\\",\\n  }\"\n      },\n      \"quality\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Sets the output quality of the corpped image (number between 0 and 1).\"\n        },\n        \"attribute\": \"quality\",\n        \"reflect\": false,\n        \"defaultValue\": \"0.8\"\n      },\n      \"preventUndersized\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"When set to true, prevents cropping an image smaller than the required size, which would blow pixel and make the final picture look blurry.\"\n        },\n        \"attribute\": \"prevent-undersized\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"view\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"imageCropChanged\",\n        \"name\": \"imageCropChanged\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"When the image crop changes, emits the dataurl for the new cropped image.\"\n        },\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        }\n      }];\n  }\n}\n//# sourceMappingURL=dnn-image-cropper.js.map\n"]}