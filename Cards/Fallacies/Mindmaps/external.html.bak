<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taxonomy Mind Map</title>
    <style>
        body {
            font-family: 'DINPro', sans-serif;
        }

        .hidden {
            display: none;
        }

        #mindmap {
            position: relative;
        }

        .node:hover {
            cursor: pointer;
        }

        .node.active {
            fill: red;
        }


        /* -------------------------------------------------------------------------------- */
        /* Fonts */
        /* -------------------------------------------------------------------------------- */

        @font-face {
            font-family: 'DINPro';
            font-style: normal;
            font-weight: 300;
            src: local('DINPro'), url('https://fonts.cdnfonts.com/s/18774/DINPro-Light tr.woff') format('woff');
        }

        @font-face {
            font-family: 'DINPro';
            font-style: normal;
            font-weight: 500;
            src: local('DINPro'), url('https://fonts.cdnfonts.com/s/18774/DINPro-Medium tr.woff') format('woff');
        }

        @font-face {
            font-family: 'DINPro';
            font-style: normal;
            font-weight: 700;
            src: local('DINPro'), url('https://fonts.cdnfonts.com/s/18774/DINPro-Bold tr.woff') format('woff');
        }

        @font-face {
            font-family: 'DINPro';
            font-style: normal;
            font-weight: 900;
            src: local('DINPro'), url('https://fonts.cdnfonts.com/s/18774/DINPro-Black tr.woff') format('woff');
        }




        /* -------------------------------------------------------------------------------- */
        /* Couleurs */
        /* -------------------------------------------------------------------------------- */

        card.insuffisance {
            --color-background: #811da3;
            --color-text-1: #601362;
            --color-text-2: #8f5991;
            --color-text-3: #a173a2;
        }

        card.influence {
            --color-background: #ff66eb;
            --color-text-1: #b3009b;
            --color-text-2: #cc00b1;
            --color-text-3: #e566d4;
        }

        card.erreurMathématique {
            --color-background: #08af93;
            --color-text-1: #14555b;
            --color-text-2: #5a888c;
            --color-text-3: #749a9e;
        }

        card.erreurDeRaisonnement {
            --color-background: #8dc801;
            --color-text-1: #476205;
            --color-text-2: #7e9150;
            --color-text-3: #92a26b;
        }

        card.abusDeLangage {
            --color-background: #0054a4;
            --color-text-1: #0c2861;
            --color-text-2: #546890;
            --color-text-3: #6f80a1;
        }

        card.tricherie {
            --color-background: #ffc307ff;
            --color-text-1: #9e7800ff;
            --color-text-2: #c49500ff;
            --color-text-3: #d6b755ff;
        }

        card.obstruction {
            --color-background: #dc0f0a;
            --color-text-1: #960a07;
            --color-text-2: #b55351;
            --color-text-3: #c16e6c;
        }



        card .famille {
            color: var(--color-text-1);
        }

        card .sous_famille {
            color: var(--color-text-2);
        }

        card .Soussousfamille {
            color: var(--color-text-3);
        }

        /* -------------------------------------------------------------------------------- */
        /* Structure */
        /* -------------------------------------------------------------------------------- */

        card {
            position: fixed;
            z-index: 100;
            font-size: 80%;
            font-family: 'Bebas Neue', sans-serif;
            background-color: white;
            width: 60vh;
            display: flex;
            flex-direction: column;
        }

        bleed {
        }

        cut {
        }

        safe {
            background-color: #fff;
            position: static;
            /* Different Safe Padding */
            /*padding: 1.2vh 2.5vh 1.5vh 2.5vh;*/
        }

        .cardName {
            display: none;
        }

        /* -------------------------------------------------------------------------------- */
        /* Entête */
        /* -------------------------------------------------------------------------------- */

        .header {
            /* display: flex;*/
            justify-content: center;
            padding-top: 1%;
        }

        .famille {
            text-transform: uppercase;
            font-size: 5.6vh;
            text-align: center;
            line-height: 1.8vh;
            letter-spacing: 0.14vh;
            color: var(--color-text-1);
        }

        .sous_famille {
            font-size: 3.4vh;
            letter-spacing: 0.05vh;
        }

        .Soussousfamille {
            font-size: 1.8vh;
        }




        /* -------------------------------------------------------------------------------- */
        /* Corps */
        /* -------------------------------------------------------------------------------- */

        .body {
            display: flex;
            padding-top: 2%;
            flex-flow: column nowrap;
            height: 100%;
            justify-content: space-between;
            border: 2.8vh solid;
            border-color: var(--color-background);
            border-radius: 2vh;
        }

        .supersetWrapper .famille {
            max-height: 61%;
            width: 100%;
            display: block;
            padding: 0;
            margin-bottom: 1.3%
        }

        .supersetWrapper .sous_famille {
            width: 100%;
            display: block;
            padding: 0;
            margin-bottom: 1%;
            text-align: center;
        }

        .contentWrapper {
            display: flex;
            flex-direction: column;
            height: 93%;
        }


        .title {
            width: 100%;
            text-align: center;
            font-size: 5vh;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.1vh;
            color: var(--color-text-1);
            box-sizing: border-box;
            flex-shrink: 0;
            padding: 2% 5% 1% 5%;
            word-wrap: break-word !important;
            display: flex;
            justify-content: center;
            align-items: center;
        }

            .title > div {
                flex-shrink: 1;
                width: 100%;
                overflow-wrap: normal
            }

        .imageSection {
            min-height: 0;
            flex-shrink: 1;
            display: flex;
            flex-flow: column;
            justify-content: flex-start;
            align-items: flex-start;
            width: 100%;
            height: 100%;
        }

        .image {
            width: 100%;
            flex-grow: 1;
            /* display: flex; */
            /* justify-content: flex-start; */
            /* align-items: flex-start; */
            text-align: center;
            /*background-color: var(--color-background-img);*/
            padding: 1% 2% 0 2%;
            min-height: 0;
        }

            .image img {
                max-width: 100%;
                max-height: 100%;
                position: relative;
                top: 50%;
                transform: translateY(-50%);
            }

        .texte {
            /*display: flex;
        flex-flow: column wrap;*/
            justify-content: space-between;
            background-color: var(--color-background);
            margin: 0% -1% -1% -1%;
        }

        .desc_fr {
            display: flex;
            align-items: center;
            text-transform: uppercase;
            font-family: 'DINpro',sans-serif;
            font-weight: 900;
            font-size: 3.2vh;
            /*margin:4% 5% 3% 5%;*/

            padding: 2% 5% 2% 5%;
            color: #fff;
        }

        .exemple_fr {
            font-family: 'DINpro',sans-serif;
            color: var(--color-text-2);
            font-size: 2.9vh;
            font-weight: 600;
            padding: 2% 5% 2% 5%;
            background-color: white;
            -webkit-font-variant-ligatures: no-common-ligatures;
            font-variant-ligatures: no-common-ligatures;
        }

        .desc_fr,
        .exemple_fr {
            overflow-wrap: break-word;
        }

        #externalLink {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px auto;
            padding: 10px 20px;
            font-size: 16px;
            color: white;
            background-color: var(--color-text-1);
            border: none;
            text-align: center;
            text-decoration: none;
            cursor: pointer;
            transition-duration: 0.4s;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25);
        }

            #externalLink:hover {
                color: var(--color-text-1);
                background-color: white;
                box-shadow: none;
            }


        /* -------------------------------------------------------------------------------- */
        /* Pied de page */
        /* -------------------------------------------------------------------------------- */

        .footer {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 4vh;
            height: 4vh;
            background-color: #fff;
            border: 1px solid;
            border-color: var(--color-background);
            border-radius: 16px 16px 16px 16px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .niveau {
            font-size: 2.8vh;
            font-weight: bold;
            text-align: right;
            color: var(--color-background);
        }

        /* -------------------------------------------------------------------------------- */
        /* Zoom */
        /* -------------------------------------------------------------------------------- */


        .zoomable {
            transform-origin: top left;
            transition: transform 0.3s ease;
        }

        .zoom-in {
            transform: scale(1.2);
        }

        .zoom-out {
            transform: scale(0.8);
        }
    </style>
</head>
<body>
    <div id="mindmap" class="zoomable">
        <object id="svgObject" type="image/svg+xml" data="[SVGPATH]"></object>
    </div>
    <card>
        <bleed>
            <cut>
                <safe>
                    <div class="cardName">Argumentum_Fallacies_1.1.1..Justification triviale</div>

                    <div class="body">
                        <div class="header">
                            <div class="supersetWrapper">
                                <div class="famille">Insuffisance</div>
                                <div class="sous_famille">
                                    Argument bâclé | <span class="Soussousfamille"> Justification triviale</span>
                                </div>
                            </div>
                        </div>
                        <div class="imageSection">
                            <a id="externalLink" href="#" target="_blank">Lien externe</a>
                            <div class="title">
                                <div>Justification triviale</div>
                            </div>
                        </div>
                        <div class="texte">
                            <div class="desc_fr">Vous attribuez à une habitude, une impression ou un exemple la valeur d'une preuve.</div>
                            <div class="exemple_fr">J'ai entendu dire que cette personne était sexiste ; il m'est donc impossible d'être en accord avec elle sur quoi que ce soit.</div>
                        </div>
                    </div>
                    <div class="footer">
                        <div class="niveau"> 3 </div>
                    </div>
                </safe>
            </cut>
        </bleed>
    </card>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const overlay = document.getElementsByTagName('card')[0];
            const title = document.getElementsByClassName('title')[0];
            const famille = document.getElementsByClassName('famille')[0];
            const sous_famille = document.getElementsByClassName('sous_famille')[0];
            const Soussousfamille = document.getElementsByClassName('Soussousfamille')[0];
            const description = document.getElementsByClassName('desc_fr')[0];
            const example = document.getElementsByClassName('exemple_fr')[0];
            const externalLink = document.getElementById('externalLink');
            const niveau = document.getElementsByClassName('niveau')[0];
            let isNodeActive = false;
            let hideOverlayTimeout = null;
            let activeNode = null;

            const svgObject = document.getElementById('svgObject');
            svgObject.addEventListener('load', function () {
                const svgDocument = svgObject.contentDocument || svgObject.getSVGDocument();
                const nodes = svgDocument.querySelectorAll('.node');

                const hideOverlay = () => {
                    overlay.classList.add('hidden');
                    isNodeActive = false;
                    if (activeNode) {
                        activeNode.classList.remove('active');
                        activeNode = null;
                    }
                };

                const recalculateOverlayPosition = (targetNode) => {
                    if (targetNode) {
                        const rect = targetNode.getBoundingClientRect();
                        const cardHeight = overlay.offsetHeight;
                        const cardWidth = overlay.offsetWidth;

                        const cardLeft = rect.left + rect.width / 2 - cardWidth / 2;
                        const cardTop = rect.top + rect.height;

                        // Calculate the maximum left position to ensure the card stays within the horizontal viewport
                        const maxLeft = window.innerWidth - cardWidth;
                        const cardLeftPosition = Math.max(0, Math.min(maxLeft, cardLeft));

                        // Calculate the maximum top position to ensure the card stays within the vertical viewport
                        const maxTop = window.innerHeight - cardHeight;
                        const cardTopPosition = Math.max(0, Math.min(maxTop, cardTop));

                        overlay.style.left = cardLeftPosition + 'px';
                        overlay.style.top = cardTopPosition + 'px';
                    }
                };


                const resizeOverlay = () => {

                    overlay.style.maxWidth = '100vw';
                    overlay.style.maxHeight = '100vh';

                    // Recalculate the overlay position when resizing
                    if (isNodeActive) {
                        const activeNode = document.querySelector('.node.active');
                        recalculateOverlayPosition(activeNode);
                    }
                };

                const showOverlay = (e) => {
                    isNodeActive = true;

                    // Remove the 'active' class from any previously active node
                    const activeNode = document.querySelector('.node.active');
                    if (activeNode) {
                        activeNode.classList.remove('active');
                    }

                    let targetNode = e.target;
                    if (!targetNode.classList.contains('node') && targetNode.parentElement.classList.contains('node')) {
                        targetNode = targetNode.parentElement;
                    }

                    // Add the 'active' class to the clicked node
                    targetNode.classList.add('active');

                    title.textContent = targetNode.textContent;
                    famille.textContent = targetNode.getAttribute('family');
                    sous_famille.textContent = targetNode.getAttribute('subfamily');
                    Soussousfamille.textContent = targetNode.getAttribute('subsubfamily');
                    description.innerHTML = targetNode.getAttribute('description');
                    example.innerHTML = targetNode.getAttribute('example');
                    externalLink.href = targetNode.getAttribute('link');
                    niveau.textContent = targetNode.getAttribute('depth');

                    overlay.removeAttribute('class');
                    const familyClass = targetNode.getAttribute('familyclass');
                    if (familyClass) {
                        overlay.classList.add(familyClass);
                    }

                    // Remove the 'hidden' class if it exists to ensure the card is visible
                    if (overlay.classList.contains('hidden')) {
                        overlay.classList.remove('hidden');
                    }

                    targetNode.classList.add('active');
                    recalculateOverlayPosition(targetNode);
                };


                nodes.forEach((node) => {
                    node.addEventListener('click', showOverlay);
                    node.addEventListener('touchstart', showOverlay);
                });

                overlay.addEventListener('mouseleave', hideOverlay);

                document.addEventListener('click', (e) => {
                    if (isNodeActive && e.target.closest('.node') === null) {
                        e.stopPropagation();
                        return;
                    }
                    if (e.target.closest('.node') === null) {
                        hideOverlay();
                    }
                });

                document.addEventListener('touchstart', (e) => {
                    const isClickedOutside = !overlay.contains(e.target);
                    if (isClickedOutside) {
                        hideOverlay();
                    }
                });

                // Trigger the initial resize
                resizeOverlay();

                window.addEventListener('resize', resizeOverlay);
                window.addEventListener('orientationchange', resizeOverlay);

                //Zoom

                const mindmapContainer = document.getElementById('mindmap');
                let zoomLevel = 1;

                function zoomIn() {
                    zoomLevel += 0.1;
                    mindmapContainer.style.transform = `scale(${zoomLevel})`;
                }

                function zoomOut() {
                    zoomLevel -= 0.1;
                    mindmapContainer.style.transform = `scale(${zoomLevel})`;
                }

                // Example usage
                document.addEventListener('keydown', (event) => {
                    if (event.key === '+') {
                        zoomIn();
                    } else if (event.key === '-') {
                        zoomOut();
                    }
                });
            });
        });
    </script>
</body>
</html>
